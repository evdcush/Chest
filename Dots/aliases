#=============================================================================#
#                                                                             #
#                          ███████╗██╗   ██╗███████╗                          #
#                          ██╔════╝╚██╗ ██╔╝██╔════╝                          #
#                          ███████╗ ╚████╔╝ ███████╗                          #
#                          ╚════██║  ╚██╔╝  ╚════██║                          #
#                          ███████║   ██║   ███████║                          #
#                          ╚══════╝   ╚═╝   ╚══════╝                          #
#                                                                             #
#=============================================================================#
# System stuff

# Display
# =======
#alias fixdisplay='sudo /etc/init.d/lightdm restart'

# Trackpoint sensitivity
# ======================
#alias trk="xinput --set-prop `xinput | grep -i trackpoint | cut -d'=' -f2 | cut -c -2` 'libinput Accel Speed' -0.7"

# Nvidia stuff
# ============
alias nvidia_driver_ver='nvidia-smi --query-gpu=driver_version --format=csv,noheader --id=0'

# To check if pytorch can discover cuda:
# python -c 'import torch; assert torch.cuda.is_available()'



#=============================================================================#
#                  ███████╗██╗  ██╗███████╗██╗     ██╗                        #
#                  ██╔════╝██║  ██║██╔════╝██║     ██║                        #
#                  ███████╗███████║█████╗  ██║     ██║                        #
#                  ╚════██║██╔══██║██╔══╝  ██║     ██║                        #
#                  ███████║██║  ██║███████╗███████╗███████╗                   #
#                  ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝                   #
#                                                                             #
#=============================================================================#
# All aliases that use coreutils and stuff is in this section

# Process stuff
# =============
#  1 HUP      2 INT      3 QUIT     4 ILL      5 TRAP     6 ABRT     7 BUS
#  8 FPE      9 KILL    10 USR1    11 SEGV    12 USR2    13 PIPE    14 ALRM
# 15 TERM    16 STKFLT  17 CHLD    18 CONT    19 STOP    20 TSTP    21 TTIN
# 22 TTOU    23 URG     24 XCPU    25 XFSZ    26 VTALRM  27 PROF    28 WINCH
# 29 POLL    30 PWR     31 SYS
alias kill9='kill -9'    # SIGKILL
alias killnow='kill -9'  # because I may not remember kill9

# Help, man, etc.
# ===============
alias mn='man --page='  # man, but spits to stdout instead of getting captured in a pager.

# Dir stuff
# =========
# NB: oh-my-zsh defines useful aliases '..'|'...'|'....'
alias md='mkdir -p'   # mkdir all non-existing dirs in path
alias cdln='cd -P'    # cd to physical path rather than symlinked

# File stuff
# ==========
alias countlines='wc --lines'
alias countwords='wc --words'
alias countchars='wc --chars'



# Path stuff
# ==========
alias pathof='readlink -e'
function pathcp() {
    # Copy path to $1.
    #   eg: pathcp setup.py
    #       /home/evan-cushing/Cloud/Projects/fart/setup.py
    pth=`readlink -en $1`;
    # $pth actually has a return-character at the end, so we translate that out.
    echo $pth | tr -d "[:cntrl:]" | xclip -sel clip;
    #echo $pth | xclip -sel clip
}


# Permissions
# ===========
alias chwn="sudo chown -R $USER:$USER"  # maybe make a func that assumes most recent /media drive?
alias shx='chmod +x'


# List stuff
# ==========
# ---- OVERVIEW OF ls OPTS ----
# FORMAT: across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C
# SORTS : none (-U), size (-S), time (-t), version (-v), extension (-X)
# g:no-owner | G:no-group (same as o?) | 1:list one file per line
# X:sort alpha by extension (ALSO PUTS DIRS FIRST?, in alpha order)
# h:human-readable (eg, file size 6378230 -> 6.1M)
# F:indicate entries by file-type (eg, sym: foo.py@, dir: Documents/)

#=== ALIASES
#alias l='ls -FHX --group-directories-first'
alias l='ls -FH --group-directories-first'
#alias l1='ls -1FHX --group-directories-first'
alias l1='ls -1FH --group-directories-first'

# list g: without owner, h: human-read, G: w/o group, F: classify, X: sort alpha by ext.
#alias ll='ls -ghGFX --time-style=long-iso --group-directories-first'
alias ll='ls -ghGF --time-style=long-iso --group-directories-first'  # the X opt causes directories to be not alpha ordered
alias lsa='ls -lha --time-style=long-iso'
alias lsd='ls -1 -d */'  # list only directories, single-column
alias ldot='ls -dF --group-directories-first .*' # list dots only
alias lk='ls -1SshX --file-type --group-directories-first' # list contents, sorted by size, grouped by ext
alias lsz='ls -1shSr' # list files, 1-line each, show size in human-readable, sorted on size, reverse (biggest bottom)
#alias lzf='ls | fzf' # list w/ fuzzy search
alias countf='find . -type f -printf . | wc -c'  # counts the total num files from cur path

lsm(){
    # List files sorted by modified date (reverse; most recent last).
    ls -gGtr --time-style=long-iso --color=always | awk '{$1=$2=$3=""; $0=$0; $1=$1; print}'

    # SOURCES:
    ## 'print from nth col to last' (awk part)
    # https://unix.stackexchange.com/a/561675
    ## NOT used, but helpful: `column -t` # from https://stackoverflow.com/a/6262979
    # https://unix.stackexchange.com/questions/22218/linux-ls-to-show-only-filename-date-and-size

}

lzf(){
    # list with fuzzy search
    if [ "$#" -eq 1 ]; then DIR="$1"; else DIR='.'; fi
    ls $DIR | fzf
}


alias h='history'
alias hzf='history | fzf'
alias lsdisk='sudo lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL'
#alias duh='du -h --max-depth=1 | sort -h;'
function duh() { du -h --max-depth=1 $1 | sort -h }

# Find stuff
# ----------
alias findzf='find * -type f | fzf'

farg() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}


# wget
# ====
alias wg='wget'


#---- misc
#alias plz='sudo $(fc -ln -1)' # mmm inconsistent
alias tjst='TZ="Asia/Tokyo" date'
alias tpst='TZ="America/Los_Angeles" date'
alias tedt='TZ="America/New_York" date'
alias tcet='TZ="Europe/Berlin" date'

# Network Stuff
# =============
alias myip='inxi -i'
alias pingu='ping github.com'
alias wifipw='nmcli dev wifi show-password'



#=============================================================================#
#                                                                             #
#                           █████╗ ██████╗ ████████╗                          #
#                          ██╔══██╗██╔══██╗╚══██╔══╝                          #
#                          ███████║██████╔╝   ██║                             #
#                          ██╔══██║██╔═══╝    ██║                             #
#                          ██║  ██║██║        ██║                             #
#                          ╚═╝  ╚═╝╚═╝        ╚═╝                             #
#                                                                             #
#=============================================================================#
# apt aliases

#==== package stuff
alias api="apt-cache show"
alias dpkgi="sudo dpkg -i "
alias deps='apt-cache rdepends'

#==== Apt cleanup
# Clear apt lock
alias getlock="sudo rm /var/lib/apt/lists/lock; \
sudo rm /var/cache/apt/archives/lock; \
sudo rm /var/lib/dpkg/lock;
"

# Regenerate apt list cache (troubleshooting for 'Waiting at headers' crap)
alias regen_apt_list="sudo apt clean; \
sudo mv /var/lib/apt/lists{,.old}; \
sudo mkdir -p /var/lib/apt/lists/partial; \
sudo apt clean; sudo apt update;
"

#==== deborphan
alias rmorph="sudo deborphan | xargs sudo apt remove --purge -y" # careful with -y

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#=== apt
ap='sudo apt'
alias atu="$ap update"
alias atg="$ap upgrade"
alias atfg="$ap full-upgrade"
alias atug="$ap update && $ap upgrade"
alias ati="$ap install"
alias atr="$ap remove"
alias atrp="$ap remove --purge"
alias ata="$ap autoremove"
alias atay="$ap autoremove -y"
alias atc="$ap clean && $ap autoclean && $ap purge"
alias atl="$ap list"
alias atlu='apt list --upgradable'

alias akd="$ap-key del"




#=============================================================================#
#                                                                             #
#              ██████╗ ██╗   ██╗    ███████╗███╗   ██╗██╗   ██╗               #
#              ██╔══██╗╚██╗ ██╔╝    ██╔════╝████╗  ██║██║   ██║               #
#              ██████╔╝ ╚████╔╝     █████╗  ██╔██╗ ██║██║   ██║               #
#              ██╔═══╝   ╚██╔╝      ██╔══╝  ██║╚██╗██║╚██╗ ██╔╝               #
#              ██║        ██║       ███████╗██║ ╚████║ ╚████╔╝                #
#              ╚═╝        ╚═╝       ╚══════╝╚═╝  ╚═══╝  ╚═══╝                 #
#                                                                             #
#=============================================================================#
# all aliases related to python stuff
alias py='python'
alias ipy='ipython'
alias jnb="jupyter notebook"
#alias jlab='jupyter lab'
alias nbscrub='nbstripout --keep-output --drop-empty-cells'
alias purgepycache="find . -name '__pycache__' -exec rm -rf {} +"

# notebook extensions
#  - jupyter_dashboards  <---- has NOT worked yet (maybe conflict with nbext?)
# pip install -U jupyter_dashboards; \
# jupyter dashboards quick-setup --sys-prefix; \
# jupyter nbextension enable jupyter_dashboards --py --sys-prefix"

# use this way too damn much
#alias cit="echo 'code.interact(local=dict(globals(), **locals()))' \
#| xclip -selection clipboard"
alias iemb="echo 'from IPython import embed; embed();' \
| xclip -sel clip"

# Cython directives
alias cyd="echo '# distutils: language = c++\n# cython: language_level=3' | xclip"

# Completely legitimately download educational material.
course_lecture_dl='coursera-dl khan-dl'

# Jupyter
# =======
## Jupyter Book
alias jbb='jupyter-book build'
alias jbc='jupyter-book clean'
alias jbm='jupyter-book myst'


#-----------------------------------------------------------------------------#
#                                pip packages                                 #
#-----------------------------------------------------------------------------#

# PyPi helpers.
alias pips='pip_search'
alias pypis='pypi search'
alias pypid='pypi description'
alias pypinfo='pypi info'

piu="pip install -U"


# UPDATE PIP PACKAGES
alias pipupdate="pip list --outdated --format=freeze \
| grep -v '^\-e' \
| cut -d = -f 1  \
| xargs -n1 pip install -U"


# Typical stack
# =============

# WARNING:
#   Malicious packages abound in pypi.
#   Need to audit this stack and remove any non-swole doges.

# work stuff
cv='opencv-python imageio scikit-video open3d-python pycocotools albumentations'

data_stack='fiftyone "docarray[full]"' #"docarray[torch,image]"'  # docarray is a data format
tracking='lvis motmetrics'

experiment_tools='tensorboard tensorboardX hydra-core omegaconf wandb fiddle'
vis_stack='matplotlib bokeh seaborn plotly pyvista hiplot graphviz altair ipyvizzu pygwalker'
jax_stack='jax jaxlib evojax evosax flax'  # haiku?
hpo_stack='optuna ray hyperopt niapy scikit-optimize pymoo' # HEBO' # HEBO has unresolvable GPy dep.
more_hpo_stack='ax-platform dragonfly-opt flaml nevergrad zoopt'
hugging_stack="accelerate 'datasets[vision]' diffusers evaluate huggingface_hub peft safetensors timm transformers" #xformers
llm_app_stack="chromadb 'dspy-ai[chromadb,qdrant]' langchain aisuite" #"evadb[document,notebook]"' #llama-index chainforge'
llm_dev_stack="openai 'openai[embeddings]' 'openai[wandb]' openai-whisper tiktoken anthropic axolotl"
ui_stack='gradio streamlit taipy'
osint_stack='sherlock-project maigret'
#docqa_stack='"nougat-ocr[api,dataset]"'  # Nougat requires an OLD version of timm

# NB: if your torch version doesn't EXACTLY match the one mmcv is built against,
#     mmcv will be broken.
#     In such a case, there is no alternative except to build from source.
mmcv_inst='pip install -U git+https://github.com/open-mmlab/mmcv.git'
#mmcv_inst='pip install -U mmcv -f https://download.openmmlab.com/mmcv/dist/cu121/torch2.1/index.html'

mmlab_stack="mmengine 'mmdet[multimodal,tracking]' 'mmpretrain[multimodal]' mmeval mmsegmentation"

alias pipimm="\
$mmcv_inst; \
$piu $mmlab_stack; \
$piu numpy scipy scikit-learn; \
"

# NB: ray[all] installs gpu stuff too! How do we otherwise get all the stuff?

# TODO: add mujoco
# WARNING: pybullet always has nasty dep conflicts.
#   Try installing pygame first.
#gym_stuff="pybullet 'gym[atari, box2d, classic_control]' gym-super-mario-bros"
gym_stuff='gym gymnasium'

# Stable diffusion / Generative etc.....
#whisper='yt-whisper'  # pip install git+https://github.com/m1guelpf/yt-whisper.git
sound_stuff='tts'



# apps
mediadl='yt-dlp youtube-dl gallery-dl spotdl papis weasyprint arxiv-dl'
imgutils='backgroundremover lama-cleaner'  # because rembg has strict version dependencies (must be 3.9)
# lama-cleaner: Image inpainting tool powered by SOTA AI Model. Remove any unwanted object, defect, people from your pictures or erase and replace(powered by stable diffusion) any thing on your pictures.

# Build/Package/Publish
# =====================
packaging_stack='flit hatch'

# Misc/experimental
# =================
staticstuff='MonkeyType code2flow'  # meh: vulture
gitty='starcli'
pro='slack-export-viewer'
profiling='vprof'

social='rainbowstream'  # twitter terminal client

# Media
# -----
#=== SPHINX
# find more cool stuff:
#   https://github.com/ray-project/ray/blob/master/doc/requirements-doc.txt
#   https://github.com/ray-project/ray/blob/master/doc/source/conf.py
sphinx_stack='sphinx docutils restview rstcheck rst2pdf pytablewriter "pytablewriter[theme]"'
# Theming docs: https://www.sphinx-doc.org/en/master/usage/theming.html
sphinx_themes='sphinx-rtd-theme sphinx-book-theme furo sphinx-material \
karma-sphinx-theme piccolo-theme sphinx-theme pydata-sphinx-theme'
#writing_stack='ablog ghp-import jupyter-book mystmd myst-parser jupyterlab_myst'
#alias pipisphinx="$piu $writing_stack; $piu $sphinx_stack; $piu $sphinx_themes;"


# Static Code Analysis & QA
# =========================
static_analysis_stack='code2flow'
formatters_stack='absolufy-imports black isort usort yapf mdformat mdformat-myst tomli "docformatter[tomli]"'
typing_stack='mypy pytype MonkeyType'
linting_stack='codespell flake8 pylint pre-commit ruff tomli'

static_stack="$static_analysis_stack $formatters_stack $typing_stack $linting_stack"

function pipigpu(){
    # Packages
    gpu_pkgs='cupy gpustat nvitop triton'
    if nvidia-smi &>/dev/null; then
        pip install -U $gpu_pkgs
        echo 'CUDA AVAILABLE; downloading cuda builds!'
    fi
}


# ################# #
# THE CORE SUBSETS  #
# ################# #
core_py_dist='pip setuptools wheel'
#core_static_stack='pre-commit pylint flake8 black isort ruff tomli yapf'
core_sci_stack='cython numpy scipy scikit-learn matplotlib pandas opencv-python sympy'
# You have to install nb 6.5.6 exactly because otherwise there is some
# bonked traitlets thing.
core_ipy_stack='\
ipython==8.34.0 \
jupytext \
nbdime \
notebook==6.5.6 \
nbstripout'
#jupyter_ai \


alias pipinew="\
$piu $core_py_dist; \
$piu $core_sci_stack; \
$piu $core_ipy_stack; \
$piu fire; \
$piu $static_stack; \
$piu $gym_stuff; \
$piu imageio scikit-video open3d-python; \
$piu $vis_stack; \
$piu $experiment_tools; \
$piu $hpo_stack; \
$piu $more_hpo_stack; \
$piu $hugging_stack; \
$piu $jax_stack; \
$piu $llm_dev_stack; \
$piu $llm_app_stack; \
$pipigpu; \
$piu feedparser requests lxml urllib3 bs4 PyGithub mpi4py; \
$piu 'pypi-command-line[speedups]' pip_search; \
$piu fart pyperclip unidecode python-slugify em-keyboard; \
$piu twine pytest loguru pyzotero; \
$piu $sphinx_stack $sphinx_themes grip docrepr; \
$piu termdown pdfCropMargins backgroundremover; \
$piu snakeviz; \
$piu tldr doitlive; \
$piu $sphinx_stack; \
$piu $sphinx_themes; \
$piu $sphinx_stack; \
$piu $mediadl; \
$piu starcli; \
$piu $data_stack; \
$piu $ui_stack; \
$piu $core_ipy_stack; \
$piu $core_sci_stack; \
"
#$piu $docqa_stack; \

# ALWAYS open and CLOSE with core sci stack.
# Many a dumbass pin their package dep to a ver or ver thresh needlessly,
# which can downgrade certain core pkgs as you install things.
# But running the install-update at the end, you can make sure your core
# dudes are always there.

# NB: if you get an error with mpi4py --> `sudo apt install -y mpich`

# GPU Utils
# =========
alias pipigpu="$piu gpustat nvitop"

#== pytorch
function pipitorch(){
    # Wheel targets.
    tag_cpu='cpu'
    tag_cuda='cu124'  # current latest cuda build available for torch
    TORCH_URL='https://download.pytorch.org/whl'
    # https://download.pytorch.org/whl/torch/

    # Check if cuda is available.
    if nvidia-smi &>/dev/null; then
        TAG=$tag_cuda
        echo 'CUDA AVAILABLE; downloading cuda builds!'
    else
        TAG=$tag_cpu
        echo 'CUDA NOT FOUND; downloading cpu builds!'
    fi

    # Install pytorch.
    pip install -U --no-cache-dir \
    torch \
    torchvision \
    torchaudio \
    torchtext \
    --extra-index-url "$TORCH_URL/$TAG"

    # Install other torch-related pkgs.
    pip install -U torchfix torchinfo torchview torchmetrics
}

#=============================================================================#
#                               ❄️ snowflakes ❄️                              #
#=============================================================================#
# The packages that require extra setup, or have iniquitous dependencies.


#-----------------------------------------------------------------------------#
#                 "You thought `pip install` was enough? lol"                 #
#-----------------------------------------------------------------------------#

alias pipimyg="$piu myougiden; updatedb-myougiden -f"
alias pipijupynb="$piu \
jupyter_contrib_nbextensions jupyter_nbextensions_configurator; \
jupyter contrib nbextension install --user; \
jupyter nbextensions_configurator enable --user;"




#-----------------------------------------------------------------------------#
#                               Dep Drama Queens                              #
#-----------------------------------------------------------------------------#
# Who doesn't like a good dependency conflict soap opera?? 🥲

im_on_an_ancient_version_of_some_extremely_common_core_dep_lol=(\
'HEBO' \
'vissl' \
'mmselfsup' \
'mmtrack' \
)


# Not necessarily deserved of "drama queen" since it's GPU/CUDA but,
# nonetheless, complicate things because GPU.

#== CuPy
# `pip install cupy` just doesnt seem to work, so use whl
alias pipicupy="pip install cupy-cuda110 -f \
https://github.com/cupy/cupy/releases/tag/v7.8.0"

# Dont even remember:
## 'pix2tex[gui]'

#=============================================================================#
#                                                                             #
#                           █████╗ ██████╗ ██████╗                            #
#                          ██╔══██╗██╔══██╗██╔══██╗                           #
#                          ███████║██████╔╝██████╔╝                           #
#                          ██╔══██║██╔═══╝ ██╔═══╝                            #
#                          ██║  ██║██║     ██║                                #
#                          ╚═╝  ╚═╝╚═╝     ╚═╝                                #
#                                                                             #
#=============================================================================#
# All aliases that use installed packages

#----- rip
# Safe alternative to `rm`.
alias rem='rip'

#----- kdbx
alias ghtp="keepassxc-cli clip -t $HOME/.otp.kdbx GHT"


#----- PDF
# NB: pdfjoin no longer part of pdfjam tool in texlive-extra-utils package anymore.
alias pdfjoin='pdfjam --fitpaper true --rotateoversize true --suffix joined '
pdfpng() {
    # Get the pdf filename provided, eg `foo.pdf`
    pdf_fname="$1"

    # Get the filename without the `.pdf` extension.
    pdf_bname=$(basename "$pdf_fname" .pdf)

    # Export a 300 dpi png of the 1st page to `foo_preview-001.png`
    pdftoppm -f 1 -l 1 -r 300 -png "$pdf_fname" "${pdf_bname}_preview"
}

numpgs() {
    # Get the number of pages of a PDF file.
    pdfinfo $1 | grep 'Pages:' | awk '{print $2}'
}

croparxpdf() {
    # Crop the margins of a PDF downloaded from arXiv.
    # NB: the reason we have this bespoke crop function for arXiv PDFs is that
    #     arXiv preprints always have the arXiv ID marked on the extreme left
    #     margin of the first page, which messes up the `pdfcropmargins`
    #     uniform & same page size opts and creates a huge left-margin
    #     for all pages because the crop-box is accommodating the arXiv ID.

    # Get the number of pages first (unfortunately, pdfcropmargins must have
    # explicitly specified end-page if you give it a range).
    end_page=`pdfinfo $1 | grep 'Pages:' | awk '{print $2}'`

    # As mentioned above, we always skip cropping the first page, due to the
    # presence of the arXiv ID mark on the left margin.
    pdfcropmargins --uniform --samePageSize --pages "2-$end_page" $1
}


# yt-dlp
# ======
# Formats
alias ytlsfmt='yt-dlp --list-formats'

# Video
## A simplified version of my existing `dlvid` func; no embeds.
alias dlvd='yt-dlp -f bestvideo+bestaudio -o "%(channel)s - %(title)s.%(ext)s"'

# Music
alias dlmus='yt-dlp -x --audio-quality 0 -o "%(channel)s - %(title)s.%(ext)s"'
alias dlmus_thumb='yt-dlp -x --audio-quality 0 --embed-thumbnail -o "%(title)s.%(ext)s"'


# FART!
# =====
alias fansi='fart -f ansi_regular'
alias fp='fart -p'
alias fop='fart -op -l "-"'



# DE
# ==
#---- nav
alias fm='nautilus'

# Dev stuff
# =========
#---- sys
alias smi='nvidia-smi'
alias gstat='gpustat -cp'
alias gstatw='gpustat -acP --watch 1'

#---- editors
alias st="subl"    # open file with sublime
alias stt="subl ." # open  dir with sublime
alias subw='subl --new-window --wait'      # open file and wait on edits
alias ssubw='sudo subl -new-window --wait' # w/ sudo; eg `ssubw /etc/profile`

#---- quarto
alias qrt='quarto'

#---- npm
alias npmls='npm list -g --depth 0'  # list all globally installed packages

# Software
# ========

#---- spotdl
#alias sptdl='spotdl --format opus'

#---- Inkscape
# Convert svg icon --> png
#alias ex_draw='inkscape --export-area-drawing --export-dpi=256 --export-type=png'
#alias ex_page='inkscape --export-area-page --export-dpi=256 --export-type=png'


function exdraw(){
    # Export an SVG image to PNG; tight borders; with optionally configurable dpi.
    svg_file=$1
    dpi=256
    if [ "$#" -eq 2 ]; then dpi=$2; fi

    inkscape --export-area-drawing --export-dpi=$dpi --export-type=png $svg_file;
}

function expage(){
    # Export an SVG image to PNG; retaining border dims; with optionally configurable dpi.
    svg_file=$1
    dpi=256
    if [ "$#" -eq 2 ]; then dpi=$2; fi

    inkscape --export-area-page --export-dpi=$dpi --export-type=png $svg_file;
}



#---- vpn
spvpn='sudo pvpn'
alias vp="$spvpn"
alias vpi="$spvpn --status"
alias vpc="$spvpn --connect"
alias vpd="$spvpn --disconnect"
alias vprc="$spvpn --reconnect"
alias vpcc="$spvpn --country-connect"
alias vpjp="$spvpn --country-connect JP udp"
alias vpcf="$spvpn --fastest-connect"

#---- journal
alias jrnl=" jrnl" # alias for preventing hist from logging jrnl

#---- todo-txt cli
alias td='todo-txt'
alias tda='todo-txt a'

#---- percollate
#alias perc='percollate pdf --output'
alias perc='percollate pdf'

#---- zsh-marks
alias g="jump"
alias s="bookmark"
alias d="deletemark"
alias p="showmarks"

#---- tree
#  -d    List directories only.
#  -h    Print the size in a more human readable way.
#  -s    Print the size in bytes of each file.
#  -L i  Descend only i directories deep.
#  -A    Print ANSI lines graphic indentation lines.
#  -F    Appends '/', '=', '*', '@', '|'  or '>' as per ls -F.
alias tre='tree --dirsfirst -AF'  # 'DEFAULT' tree command. (tried alias `ki`, before but of course never remember)
alias treed='tree -dA'  # Only show dirs.
alias treesz='tree --dirsfirst -s -hAF'  # Show filesizes for everything.

#---- Copy
alias clip="xclip -selection clipboard"
#alias clipo="xclip -o -sel clip"
alias delclip="xclip -o | xargs sudo rm -rf"
alias clipo='xclip -o'
alias pst='xclip -o >'

alias symble="echo '≤' | xclip -sel clip"
alias symbge="echo '≥' | xclip -sel clip"

# copy previous command (is this really the only sol? stupidly verbose)
# if you dont translate, there is newline?
# if you dont cut, there is CMD number
# if you dont selection clipboard, xclip copies to who the f knows
alias cph='echo $(fc -l -1) \
| cut -d" " -f2- \
| tr -d "\n" \
| xclip -selection clipboard'

#---- joplin
# alias get_jop="wget -O - \
# https://raw.githubusercontent.com/laurent22/joplin/master/Joplin_install_and_update.sh \
# | bash"

#---- cheat & tldr
#alias cht='cheat'  # I want to use this alias for cheat.sh instead.
alias cht='cht.sh'
alias tl='tldr'

#---- wttr.in
alias weath='curl wttr.in'

#---- qalc
usd2jpy() {
    usd="$1"
    qalc -t $usd USD to JPY
}

jpy2usd() {
    jpy="$1"
    qalc -t $jpy JPY to USD
}

#---- python-wrapped
function pyp() {
    cmd_str="print($@)"
    python -c $cmd_str
}

# Temperature conversion
C2F() { pyp "$1 * 1.8 + 32" }
F2C() { pyp "($1 - 32) * 0.5556" }


#---- background noise
alias waves='play -n synth brownnoise synth pinknoise mix synth sine amod 0.3 10'

# SYMLINKS
# ========
#---- stow
alias stowpro='stow --target=/home/evan/Projects'
alias stowhome='stow --target=/home/evan'

# Misc software
# =============
#alias rgr="ranger"            # ranger file manager
alias rs='redshift -O 2400'   # screen color temp adjust for night
#alias ja='myougiden'   # ja now a func that can accept from clipboard
alias myg="echo \
'\n#########################################################\n' && \
myougiden"

#---- bat
#alias bat='batcat'
alias bt='bat -pP'
# ^: `bat --style=plain --paging never` (so no line nums and it spits output
#    to stdout without pager like cat)
alias bth='bat -pP -r ":10"'  # like 'head'



########################
# FLATPAK
alias frun='flatpak run'
alias flup='flatpak update'
alias flist='flatpak list --app --columns=name,application,description,version'



#=============================================================================#
#                                                                             #
#                             ██████╗ ██╗████████╗                            #
#                            ██╔════╝ ██║╚══██╔══╝                            #
#                            ██║  ███╗██║   ██║                               #
#                            ██║   ██║██║   ██║                               #
#                            ╚██████╔╝██║   ██║                               #
#                             ╚═════╝ ╚═╝   ╚═╝                               #
#                                                                             #
#=============================================================================#

# You are you aware...
# You can set git aliases directly in git:
# git config --global alias.<handle> <command>
# git config --global alias.st status

# Config
# ======
alias glocal='git config --local -l'
alias gglobal='git config --global -l'

alias gnotrack='git config --local  status.showUntrackedFiles no'


# Status
# ======
alias gs="git status"
alias gd="git diff --ignore-all-space"
alias gdma='git diff --diff-filter=MA master...'  # only show diffs made in files on the branch against compared to master.
alias gdls='git --no-pager diff --diff-filter=MA --name-only master...'  # List files modified in branch from master.
alias gls="git ls-files"

#--- LOG
alias glog="git log --abbrev-commit --show-signature"
alias glognp="git --no-pager log --abbrev-commit --show-signature"
alias glog1="git log --graph --decorate --oneline --all"
alias glogdiffs='git cherry -v master'  # see commit history for just the current branch.

alias glogp='git log -p'  # Show changes over time for a specific file.


# Navigation
# ==========
alias gm="git mv -v"
alias gsw='git switch'
alias gk="git checkout"
alias gkb="git checkout -b"
alias mstr="git checkout master"
alias gitwhich='git branch --contains'  # Find out which branches contain commit-hash provided.

# Add & Committing
# ================
alias ga="git add"
alias gau="git add -u"
alias gaa="git add -A"
alias gr="git restore"
alias gcm="git commit -m"
alias gcms='git commit -S -m'
alias gcnm="git commit -n -m"
alias gucm="git add -u && git commit -m"
alias gcam="git commit -a -m"
alias gcmd="git commit --amend --no-edit"
alias gacmd="git add -u && git commit --amend --no-edit"
alias precomdiffs="git diff --diff-filter=MA --name-only master... | xargs pre-commit run --files"

alias gcamend='git commit -v --amend'  # Reword the previous commit message.

# Remote
# ======
#alias gitremoteurl='git remote get-url --all origin'
alias gcn="git clone"
alias gcn1="git clone --depth=1"
alias gf="git fetch"
alias gpull="git pull"
alias gpush="git push"
alias gpushset='git push --set-upstream origin master'

alias gchkoutall='git branch -a | grep remotes | grep -v HEAD | cut -d'/' -f3- | xargs -I% git checkout %'

# Setup git remote and push.
function gitremotepush(){
    echo 'Setting up remote for local repo...'

    # Get the remote target.
    if [ "$#" -eq 0 ]; then
        # If no target passed, then assume it is in clipboard.
        target=`xclip -o -sel clip`
    else
        # Otherwise assume it was passed as first arg.
        target=$1
    fi

    # Confirm remote url.
    user_confirm='Y'
    echo -n "\n$target\nIs this your target remote? (Y/n): "
    read user_input
    user_confirm=${user_input:-$user_confirm}
    if [ "$user_confirm" = "${user_confirm#[Yy]}" ] ; then
        echo 'Then please specify the git remote target. Cancelling.'
        exit;
    fi

    # Add the remote origin.
    echo "\nAdding remote origin:\ngit remote add origin $target\n"
    git remote add origin $target

    # Set upstream.
    echo "Setting the remote as upstream and pushing:"
    echo 'git push --set-upstream origin master'
    git push --set-upstream origin master

    echo "\nFinished!"
    echo 'Check it out:'

    # 'git@github.com:evdcush/Docsets.git' --> 'github.com/evdcush/Docsets.git'
    target_tr=`echo $target | cut -c 5- | tr ':' '/'`
    # 'github.com/evdcush/Docsets.git' --> 'https://github.com/evdcush/Docsets.git'
    target_url="https://$target_tr"

    echo $target_url
}


# git extras stuff
# ================
alias gcu="git-crypt unlock $GCKEY_CHEST" # unlock encrypted stuff in chest

gcampu(){
    # add modified --> commit --> push
    msg="$@"
    git add -u
    git commit -m "$msg"
    git push
}

gacmpu(){
    # add modified --> commit --> push
    file="$1"
    msg="$2"
    git add $file
    git commit -m "$msg"
    git push
}

# Returns sorted size objects tracked in git tree
alias gsize="git rev-list --objects --all \
| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
| sed -n 's/^blob //p' \
| sort --numeric-sort --key=2 \
| cut -c 1-12,41- \
| numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest"


# Git LFS
# =======
#alias gcnlfs='GIT_LFS_SKIP_SMUDGE=1 git clone'
alias getgitlfs='git-lfs fetch && git-lfs checkout'
alias lfsls='git lfs ls-files | cut -d' ' -f 3'

# Wrapper for `GIT_LFS_SKIP_SMUDGE=1 git clone`
function gcnlfs(){
    if [ "$#" -eq 0 ]; then
        # No arg given, get arg from clipboard
        target=`xclip -o -sel clip`
    else
        # arg given
        target=$1
    fi
    GIT_LFS_SKIP_SMUDGE=1 git clone $target;
}

# A function/hack to get lfs files from a lfs target, without populating the
# entire `.git/lfs/objects` along the way.
function getlfstargets() {
  # Create or overwrite the output file.
  echo '#!/usr/bin/env bash' > get_lfs_targets.sh

  # For each fpath returned by lfs ls, append the get pattern to the getter
  # script.
  git lfs ls-files | cut -d' ' -f 3 | while read -r LFS_FILEPATH; do
    txtcmd="git-lfs pull --include='$LFS_FILEPATH' && rm -rf .git/lfs/objects;"
    echo $txtcmd >> get_lfs_targets.sh
  done

  # Make that shit executable.
  chmod +x get_lfs_targets.sh
}


#=============================================================================#
#                                                                             #
#                      ██╗   ██╗███████╗███████╗██████╗                       #
#                      ██║   ██║██╔════╝██╔════╝██╔══██╗                      #
#                      ██║   ██║███████╗█████╗  ██████╔╝                      #
#                      ██║   ██║╚════██║██╔══╝  ██╔══██╗                      #
#                      ╚██████╔╝███████║███████╗██║  ██║                      #
#                       ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝                      #
#                                                                             #
#=============================================================================#
# stuff that references user resources

#=== templates

function RDME() {
    SRC_DIR="$DIR_CHEST_TEMPLATES/README.rst"
    DEST_DIR="$PWD/README.rst"
    cp $SRC_DIR $DEST_DIR
}

#=== license copies
alias apache="cp $DIR_CHEST_TEMPLATES/Licenses/Apache-2.0.txt ./LICENSE"
alias apacheai="cp $DIR_CHEST_TEMPLATES/Licenses/Apache-2.0-Non-AI.txt ./LICENSE"
alias bsd3="cp $DIR_CHEST_TEMPLATES/Licenses/BSD-3-Clause.txt ./LICENSE"
alias bsd3ai="cp $DIR_CHEST_TEMPLATES/Licenses/BSD-3-Clause-Non-AI.txt ./LICENSE"
alias lgpl="cp $DIR_CHEST_TEMPLATES/Licenses/LGPL-3.0.txt ./LICENSE"
alias agpl="cp $DIR_CHEST_TEMPLATES/Licenses/AGPL-3.0.txt ./LICENSE"
alias ccsa="cp $DIR_CHEST_TEMPLATES/Licenses/CC-BY-NC-SA-4.0.txt ./LICENSE"
alias ccnd="cp $DIR_CHEST_TEMPLATES/Licenses/CC-BY-NC-ND-4.0.txt ./LICENSE"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


function lorem() {
    LOREM="Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
Vivamus varius eleifend porttitor. Proin commodo, velit at molestie eleifend, \
odio lectus vehicula sem, vel suscipit quam urna quis dolor. Nulla quis lorem \
massa. Curabitur tincidunt lorem sed nisi aliquet, at molestie arcu viverra. \
Aliquam vitae metus nulla. Sed gravida egestas ex, id elementum justo congue \
a. Maecenas sed nulla in metus pulvinar ultrices. Ut mollis, lacus id \
convallis rutrum, quam mauris consectetur mauris, volutpat tincidunt lacus \
felis sit amet lectus. Vestibulum congue condimentum neque in efficitur. \
Phasellus suscipit orci a dolor aliquam, eget facilisis felis dictum. Sed \
sodales erat vel bibendum egestas. Proin scelerisque eget augue non rhoncus. \
Mauris dictum tortor ut mauris lobortis feugiat. Curabitur malesuada commodo \
mi sit amet vestibulum. Vivamus vel malesuada ligula."
    echo $LOREM | xclip -sel clip
    echo $LOREM
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function mdclicksection() {
    md_click_section_template='<details>
  <summary>Screencap📸</summary>


</details>
'
    echo $md_click_section_template | xclip -sel clip
    echo $md_click_section_template
    echo '(This was copied to your clipboard!)'
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

alias gn='gennames'
