#-----------------------------------------------------------------------------#
#                                Endemic                                      #
#-----------------------------------------------------------------------------#

# Copy README template to cwd
function RDME() {
    SRC_DIR="$DIR_CHEST_RESOURCES/Templates/README.rst"
    DEST_DIR="$PWD/README.rst"
    cp $SRC_DIR $DEST_DIR
}

# Download paper
dub() { dochub $1 -i -d -n; }


# PYGMENTS SYMLINK
# ----------------
# symlink custom pygment theme to pygments styles dir
# eg: ln -sf /home/evan/Chest/Resources/Themes/pygments/piodine.py /home/evan/.pyenv/versions/3.8.2/envs/382/lib/python3.8/site-packages/pygments/styles
function lnpyg(){
    ## link src
    PYGSRC="$HOME/Chest/Resources/Themes/pygments/piodine.py"

    ## link dest
    PYMAJ=`python --version | cut -d' ' -f2 | cut -d'.' -f1-2`
    PYVENV=$PYENV_VIRTUAL_ENV   # eg: /home/evan/.pyenv/versions/3.8.2/envs/382
    PYGDST="$PYVENV/lib/python$PYMAJ/site-packages/pygments/styles"

    ## symlink
    echo "Symlinking \n$PYGSRC\n\tto\n$PYGDST"
    ln -sf $PYGSRC $PYGDST
}



#=============================================================================#
#                                                                             #
#           ,ad8888ba,          db         88           88                    #
#          d8"'    `"8b        d88b        88           88                    #
#         d8'                 d8'`8b       88           88                    #
#         88                 d8'  `8b      88           88                    #
#         88                d8YaaaaY8b     88           88                    #
#         Y8,              d8""""""""8b    88           88                    #
#          Y8a.    .a8P   d8'        `8b   88           88                    #
#           `"Y8888Y"'   d8'          `8b  88888888888  88888888888           #
#                                                                             #
#=============================================================================#
# call some app

# inlines
# =======
# stuff that would be an alias

nbc() { jupyter nbconvert --to pdf "$1" --template classicm } # pdf conversion
tst() { touch "$1"; subl "$1" }

# stupid complicated                              # strip damn ansi colors
ipgeo() { inxi -i | awk '/WAN/ {print $5}' | sed "s,\x1B\[[0-9;]*m,,g" | xargs geoiplookup }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Wrapper for wget from clipboard
function get(){
    if [ "$#" -eq 0 ]; then
        # No arg given, get arg from clipboard
        target=`xclip -o -sel clip`
    else
        # arg given
        target=$1
    fi
    #wget -P ~/.cache $target;
    wget $target;
}


#==== leetcode-cli
function leet(){
    # leet(int num, str lang=python3): generate leetcode problem num
    # leet 307 --> 307.range-sum-query-mutable.py
    # leet 307 cpp --> 307.range-sum-query-mutable.cpp
    PROBLEM_NUM="$1"
    LANG='python3'
    if [ "$#" -gt 1 ]; then
        LANG="$2"
    fi
    leetcode show $PROBLEM_NUM -gx -l $LANG
}


#==== myougiden, jp dictionary lookup
# Lookup a word in myougiden dictionary
#  will lookup given arg or from clipboard
function ja(){
    if [ "$#" -eq 0 ]; then
        # No arg given, get arg from clipboard
        lookup_arg=`xclip -o -sel clip`
        # NB: wrapping bash statement in backticks makes var = statement ret ;]
    else
        # arg given
        lookup_arg=$1
    fi
    myougiden $lookup_arg
}


#=============================================================================#
#                                                                             #
#                88888888888  888b      88  8b           d8                   #
#                88           8888b     88  `8b         d8'                   #
#                88           88 `8b    88   `8b       d8'                    #
#                88aaaaa      88  `8b   88    `8b     d8'                     #
#                88"""""      88   `8b  88     `8b   d8'                      #
#                88           88    `8b 88      `8b d8'                       #
#                88           88     `8888       `888'                        #
#                88888888888  88      `888        `8'                         #
#                                                                             #
#=============================================================================#

# Cython
# ======
#---- full compile of cython from pyx to .so
function cycc(){
    # First get filenames
    FNAME_PYX="$1"  # foo.pyx file
    BASENAME=`echo $FNAME_PYX | cut -d'.' -f1`  # foo
    FNAME_C="$BASENAME.c"   # foo.c
    FNAME_O="$BASENAME.so"  # foo.so

    # Cython compiler:  foo.pyx --> foo.c
    cython "$FNAME_PYX"  # cython compiler

    # Py version
    PYVER=`python --version | cut -d' ' -f2`  # eg 3.8.2
    PYMAJ=`echo $PYVER | cut -d'.' -f1-2`     # eg 3.8
    PYMPATH="$HOME/.pyenv/versions/$PYVER/include/python$PYMAJ\m"

    # C compiler:  foo.c --> foo.so
    #gcc -shared -pthread -fPIC -fwrapv -O2 -Wall \
    #-fno-strict-aliasing -I/home/evan/.pyenv/versions/3.7.2/include/python3.7m \
    #-o "$FNAME_O" "$FNAME_C"
    gcc -shared -pthread -fPIC -fwrapv -O2 -Wall \
    -fno-strict-aliasing -I"$PYMPATH" \
    -o "$FNAME_O" "$FNAME_C"
}


# Reset PATH to default
function reset_path(){
    echo "Resetting Path...\n--------------------------------------------------"
    echo "  current path = $PATH\n"
    PATH="$PATH_DEFAULT"  # in 'path' dots
    #PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    #PATH=$(getconf PATH)
    echo "  reset path = $PATH\n"
    source ~/.zshrc
    echo "--------------------------------------------------"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Make new pyenv virtualenv
function pvenv(){
    if [ "$#" -gt 1 ]; then
        #==== python version specified
        PY_VER="$1"
        VENV_NAME="$2"
    else
        #==== default latest python ver (3.7)
        PY_VER='3.7.3'
        VENV_NAME="$1"
    fi
    #==== Make virtualenv
    pyenv virtualenv "$PY_VER" "$VENV_NAME"
    pyenv local "$VENV_NAME"
    #==== Update base packages
    pip install -U pip setuptools wheel
}


#=============================================================================#
#                                                                             #
#   ad88888ba   88        88  88        88  888888888888  88  88              #
#  d8"     "8b  88        88  88        88       88       88  88              #
#  Y8,          88        88  88        88       88       88  88              #
#  `Y8aaaaa,    88aaaaaaaa88  88        88       88       88  88              #
#    `"""""8b,  88""""""""88  88        88       88       88  88              #
#          `8b  88        88  88        88       88       88  88              #
#  Y8a     a8P  88        88  Y8a.    .a8P       88       88  88              #
#   "Y88888P"   88        88   `"Y8888Y"'        88       88  88888888888     #
#                                                                             #
#=============================================================================#

# scp with reversed order
#   scp file.txt target:/path/to/dst
#   pcs target:/path/to/dst file.txt
pcs(){ scp $2 $1 }

# cp with reversed order
pc(){ cp $2 $1 }

# dir and file stuff
# ==================
# Sort utils
srt() { sort -o "$1" "$1" }
unq() { sort "$1" | uniq -i }
dups() { sort "$1" | uniq -d }

# Diff files in the manner of git diff
gdiff () { diff -u $@ | colordiff | less -R; }

# dir stuff
mcd() { mkdir -p "$1" && cd "$1" }
cdl() { cd "$1" && ls -1FSshX --file-type }

# save console stdout and stderr to file (and display in console)
function shsv() { $@ 2>&1 | tee output.txt }

# Symlink
# =======
# symlink something from curdir to somewhere rooted from home
lnc() { ln -sf "$PWD" "$HOME/$1" }     # symlink curdir


# symlink something to ~/.local/bin
function lnbin(){
    # make thing executable
    chmod +x "$1"
    # Set paths
    SRC="$PWD/$1"
    #DEST="$PATH_USER_BIN"
    DEST="$HOME/.local/bin"
    if [ "$#" -gt 1 ]; then
        # rename link endpoint
        #DEST="$PATH_USER_BIN/$2"
        DEST="$DEST/$2"
    fi
    # link it up (NB: -r converts abs symlinks to rel)
    #ln -sfr $SRC $DEST
    ln -sf $SRC $DEST
}

# symlink something to ~/.local/bin
function lnappi(){
    # make thing executable
    chmod +x "$1"
    # Set paths
    SRC="$PWD/$1"
    DST="$HOME/.Apps/AppImages"
    if [ "$#" -gt 1 ]; then
        # rename link endpoint
        DST="$DST/$2"
    fi
    # link it up (NB: -r converts abs symlinks to rel)
    ln -sf $SRC $DST
}

function lnpro(){
    src="$PWD/$1"
    dst="$HOME/Projects"
    ln -sf $src $dst
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Finding stuff
# =============
function find_and_remove_all(){
    matches=$(sudo find / -iname "*$1*")
    echo "$matches"
    echo -n "Do you want to proceed (y/N)? "
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        echo "Proceeding to remove all matches..."
        sudo find / -iname "*$1*" -exec rm -rf "{}" \;
        echo "Finished removal"
    else
        echo "ABORTED"
    fi
}

# Shortcut find
function f(){
    # SH
    if [ "$#" -gt 1 ]; then
        #=== find location specified
        find "$1" -iname "*$2*"
    else
        #==== find from root
        sudo find / -iname "*$1*"
    fi
}


#=============================================================================#
#                                                                             #
#                        ,ad8888ba,   88  888888888888                        #
#                       d8"'    `"8b  88       88                             #
#                      d8'            88       88                             #
#                      88             88       88                             #
#                      88      88888  88       88                             #
#                      Y8,        88  88       88                             #
#                       Y8a.    .a88  88       88                             #
#                        `"Y88888P"   88       88                             #
#                                                                             #
#=============================================================================#

# git clone && cd
function gcd(){
    REPO_URL=$1
    git clone --depth=1 $REPO_URL
    cdl "$(basename $1 .git)"
}


# Scorched earth
# ==============
function git-nuke(){
    #=== nuke targets
    TARGETS=$@
    echo -n "WARNING: git-nuke called on $TARGETS, do you want to proceed? (y/N): "
    read launch_confirmation
    if [ "$launch_confirmation" != "${launch_confirmation#[Yy]}" ] ;then
        echo "Proceeding to nuke"
        echo "NOTE: current .git is saved as GITBKP in case of SNAFU, and must removed manually\n"
        cp -r .git GITBKP

        #=== Delete specified files from hist
        git filter-branch --force --index-filter \
        "git rm --cached --ignore-unmatch $TARGETS" \
        --prune-empty --tag-name-filter cat -- --all

        #=== Cleanup refs
        git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
        git reflog expire --expire=now --all
        git gc --aggressive --prune=now

        #=== Push changes
        echo -n "\n\tLocal repo nuked; Do you want to force push to remote? (y/N): "
        read push_confirmation
        if [ "$push_confirmation" != "${push_confirmation#[Yy]}" ] ;then
            git push --all --prune --force  # will delete all branches not in local
        else
            echo "REMOTE PUSH ABORT\n  NOTE: local git changes persist"
            echo "\nTo restore git to pre-nuke state:"
            echo 'rm -rf .git; mv GITBKP .git; git reset HEAD --hard'
            echo "\nTo force push changes:"
            echo 'git push --all --prune --force'
        fi
    else
        echo "/tNUCLEAR STRIKE CANCELED"
    fi
}

# Get latest release urls from github, defaulting on zip
#  usage:
#   # get zip releases
#   $ get_release balena-io etcher
#
#   # get amd64 AppImage releases
#   $ get_release balena-io etcher amd64.AppImage
function get_release {
    # read args
    _USER="$1"
    _REPO="$2"
    _EXT='zip'
    if [ "$#" -gt 2 ]; then
        _EXT="$3"
    fi
    # format url and GET
    _HUB="https://api.github.com/repos/$_USER/$_REPO/releases/latest"
    _TARGET="browser_download_url.*$_EXT"
    wget -q -nv -O- $_HUB | grep $_TARGET | cut -d: -f 2,3 | tr -d '[:space:]"'
}
