#-----------------------------------------------------------------------------#
#                                Endemic                                      #
#-----------------------------------------------------------------------------#

# Copy README template to cwd
function RDME() {
    SRC_DIR="$DIR_CHEST_RESOURCES/Templates/README.rst"
    DEST_DIR="$PWD/README.rst"
    cp $SRC_DIR $DEST_DIR
}


# PYGMENTS SYMLINK
# ----------------
# symlink custom pygment theme to pygments styles dir
# eg: ln -sf /home/evan/Chest/Resources/Themes/pygments/piodine.py /home/evan/.pyenv/versions/3.8.2/envs/382/lib/python3.8/site-packages/pygments/styles
function lnpyg(){
    ## link src
    PYGSRC="$HOME/Chest/Resources/Themes/pygments/piodine.py"

    ## link dest
    PYMAJ=`python --version | cut -d' ' -f2 | cut -d'.' -f1-2`
    PYVENV=$PYENV_VIRTUAL_ENV   # eg: /home/evan/.pyenv/versions/3.8.2/envs/382
    PYGDST="$PYVENV/lib/python$PYMAJ/site-packages/pygments/styles"

    ## symlink
    echo "Symlinking \n$PYGSRC\n\tto\n$PYGDST"
    ln -sf $PYGSRC $PYGDST
}



#=============================================================================#
#                                                                             #
#           ,ad8888ba,          db         88           88                    #
#          d8"'    `"8b        d88b        88           88                    #
#         d8'                 d8'`8b       88           88                    #
#         88                 d8'  `8b      88           88                    #
#         88                d8YaaaaY8b     88           88                    #
#         Y8,              d8""""""""8b    88           88                    #
#          Y8a.    .a8P   d8'        `8b   88           88                    #
#           `"Y8888Y"'   d8'          `8b  88888888888  88888888888           #
#                                                                             #
#=============================================================================#
# call some app

# inlines
# =======
# stuff that would be an alias

nbc() { jupyter nbconvert --to pdf "$1" --template classicm } # pdf conversion
touchst() { touch "$1"; subl "$1" }

# stupid complicated                              # strip damn ansi colors
#ipgeo() { inxi -i | awk '/WAN/ {print $5}' | sed "s,\x1B\[[0-9;]*m,,g" | xargs geoiplookup }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#==== myougiden, jp dictionary lookup
# Lookup a word in myougiden dictionary
#  will lookup given arg or from clipboard
function ja(){
    if [ "$#" -eq 0 ]; then
        # No arg given, get arg from clipboard
        lookup_arg=`xclip -o -sel clip`
        # NB: wrapping bash statement in backticks makes var = statement ret ;]
    else
        # arg given
        lookup_arg=$1
    fi
    myougiden $lookup_arg
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# I use this pattern everywhere.
# Get an argument passed either directly to the func,
#   or from the clipboard (if not provided).
function get_arg() {
    if [ "$#" -eq 0 ]; then
        # No args given, get args from clipboard
        _arg=$(xclip -o -sel clip)
    else
        # args given
        _arg=$@
    fi
    echo "$_arg"
}

# Wrapper for wget from clipboard
function get(){
    #if [ "$#" -eq 0 ]; then
    #    # No arg given, get arg from clipboard
    #    target=`xclip -o -sel clip`
    #else
    #    # arg given
    #    target=$1
    #fi
    #wget -P ~/.cache $target;
    target=$(get_arg)
    _log_file="$DIR_DOTS/wgetz.log"
    _timestamp=$(date +%Y-%m-%d_%H:%M:%S_%Z)
    _log_msg="$_timestamp: $target"
    wget $target && echo "$_log_msg" >> $_log_file;
}

function cget(){
    # Same as `get`, but downloads to ~/.cache

    if [ "$#" -eq 0 ]; then
        # No arg given, get arg from clipboard
        target=`xclip -o -sel clip`
    else
        # arg given
        target=$1
    fi
    cd ~/.cache;
    wget $target;
}




#-----------------------------------------------------------------------------#
#                                    Media                                    #
#-----------------------------------------------------------------------------#


#==== spotdl
function sptdl() {
    target=$(get_arg)
    spotdl --format opus $target
}


# youtube-dl
# ==========
# TODO: figure out how to write stuff like the YT id and artist etc to the
#       file metadata (instead of writing id to filename.
#       SEE:
# yt-dlp -h | grep meta
#     --force-overwrites              Overwrite all video and metadata files. This
#     --write-info-json               Write video metadata to a .info.json file
#     --no-write-info-json            Do not write video metadata (default)
#     --write-playlist-metafiles      Write playlist metadata in addition to the
#                                     video metadata when using --write-info-json,
#     --no-write-playlist-metafiles   Do not write playlist metadata when using
#                                     extracting metadata even if the videos are
#     --embed-metadata                Embed metadata to the video file. Also
#                                     used (Alias: --add-metadata)
#     --no-embed-metadata             Do not add metadata to file (default)
#                                     (Alias: --no-add-metadata)
#     --parse-metadata FROM:TO        Parse additional metadata like title/artist
#     --replace-in-metadata FIELDS REGEX REPLACE
#                                     Replace text in a metadata field using the
#     --xattrs                        Write metadata to the video file's xattrs

#alias dlmus='yt-dlp -x --audio-quality 0 -o "%(title)s.%(id)s.%(ext)s"'
#alias dlmus_thumb='yt-dlp -x --audio-quality 0 --embed-thumbnail -o "%(title)s.%(id)s'
#alias dlvid='yt-dlp -f bestvideo+bestaudio -o "%(title)s.%(id)s.%(ext)s" --restrict-filenames'
#alias dlvid='yt-dlp -f bestvideo+bestaudio -o "%(channel)s - %(title)s.%(id)s.%(ext)s"'

#==== yt-dlp
function dlvid(){
    # Download a video in highest available formats.

    # Get the target.
    target=$(get_arg)
    target_fmt='bestvideo+bestaudio'

    arg_count=$(echo "$target" | wc -w)

    if [ "$arg_count" -eq 2 ]; then
        # If 2 args were given, assume the second is the format
        # specifier (of the form '{int}+{int}').
        target_fmt=$(echo "$target" | awk '{print $2}')
        target=$(    echo "$target" | awk '{print $1}')
    fi

    # Figure out the title of the target.
    filename_fmt="%(channel)s - %(title)s.%(id)s.%(ext)s"
    target_filename=$(yt-dlp --simulate --print $filename_fmt $target)

    # Report the target info to the user.
    echo "DOWNLOADING:\n$target\n\tTO:\n$target_filename"

    # Log the event.
    mkdir -p $DIR_DOTS
    _log_file="$DIR_DOTS/yt.log"
    _timestamp=$(date +%Y-%m-%d_%H%M%S)
    _log_msg="$_timestamp: $target; '$target_filename'"
    echo "LOGGING:\n$_log_msg"
    echo "$_log_msg" >> $_log_file

    # Now, actually get the thing.
    yt-dlp \
    --embed-thumbnail --embed-metadata --embed-chapters \
    -f $target_fmt \
    -o $filename_fmt \
    $target
    #-o "%(channel)s - %(title)s.%(ext)s" \

}

#==== yt-dlp
function dlvid1080(){
    # Download a video in 1080p vid format and best audio.

    # Get the target.
    target=$(get_arg)
    target_fmt='bestvideo[height=1080]+bestaudio/best'

    arg_count=$(echo "$target" | wc -w)

    if [ "$arg_count" -eq 2 ]; then
        # If 2 args were given, assume the second is the format
        # specifier (of the form '{int}+{int}').
        target_fmt=$(echo "$target" | awk '{print $2}')
        target=$(    echo "$target" | awk '{print $1}')
    fi

    # Figure out the title of the target.
    filename_fmt="%(channel)s - %(title)s.%(id)s.%(ext)s"
    target_filename=$(yt-dlp --simulate --print $filename_fmt $target)

    # Report the target info to the user.
    echo "DOWNLOADING:\n$target\n\tTO:\n$target_filename"

    # Log the event.
    mkdir -p $DIR_DOTS
    _log_file="$DIR_DOTS/yt.log"
    _timestamp=$(date +%Y-%m-%d_%H%M%S)
    _log_msg="$_timestamp: $target; '$target_filename'"
    echo "LOGGING:\n$_log_msg"
    echo "$_log_msg" >> $_log_file

    # Now, actually get the thing.
    yt-dlp \
    --embed-thumbnail --embed-metadata --embed-chapters \
    -f $target_fmt \
    -o $filename_fmt \
    $target
    #-o "%(channel)s - %(title)s.%(ext)s" \

}


#=============================================================================#
#                                                                             #
#                88888888888  888b      88  8b           d8                   #
#                88           8888b     88  `8b         d8'                   #
#                88           88 `8b    88   `8b       d8'                    #
#                88aaaaa      88  `8b   88    `8b     d8'                     #
#                88"""""      88   `8b  88     `8b   d8'                      #
#                88           88    `8b 88      `8b d8'                       #
#                88           88     `8888       `888'                        #
#                88888888888  88      `888        `8'                         #
#                                                                             #
#=============================================================================#


# Reset PATH to default
function reset_path(){
    echo "Resetting Path...\n--------------------------------------------------"
    echo "  current path = $PATH\n"
    PATH="$PATH_DEFAULT"  # in 'path' dots
    #PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    #PATH=$(getconf PATH)
    echo "  reset path = $PATH\n"
    source ~/.zshrc
    echo "--------------------------------------------------"
}



#=============================================================================#
#                                    Python                                   #
#=============================================================================#


# Cython
# ======
#---- full compile of cython from pyx to .so
function cycc(){
    # First get filenames
    FNAME_PYX="$1"  # foo.pyx file
    BASENAME=`echo $FNAME_PYX | cut -d'.' -f1`  # foo
    FNAME_C="$BASENAME.c"   # foo.c
    FNAME_O="$BASENAME.so"  # foo.so

    # Cython compiler:  foo.pyx --> foo.c
    cython "$FNAME_PYX"  # cython compiler

    # Py version
    PYVER=`python --version | cut -d' ' -f2`  # eg 3.8.2
    PYMAJ=`echo $PYVER | cut -d'.' -f1-2`     # eg 3.8
    PYMPATH="$HOME/.pyenv/versions/$PYVER/include/python$PYMAJ\m"

    # C compiler:  foo.c --> foo.so
    #gcc -shared -pthread -fPIC -fwrapv -O2 -Wall \
    #-fno-strict-aliasing -I/home/evan/.pyenv/versions/3.7.2/include/python3.7m \
    #-o "$FNAME_O" "$FNAME_C"
    gcc -shared -pthread -fPIC -fwrapv -O2 -Wall \
    -fno-strict-aliasing -I"$PYMPATH" \
    -o "$FNAME_O" "$FNAME_C"
}



#-----------------------------------------------------------------------------#
#                                     Pip                                     #
#-----------------------------------------------------------------------------#


function pipi(){
    # Install/upgrade pip pkgs and save pkg names.

    # Exit if no packages were provided.
    if ! (( $# )); then return; fi

    # Log the target packages.
    mkdir -p $DIR_DOTS
    _PIP_LOG="$DIR_DOTS/pipi.log"
    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)

    echo "$_TIMESTAMP: $@" >> $_PIP_LOG

    # Install packages.
    pip install -U "$@"
}

#=============================================================================#
#                                  Navigation                                 #
#=============================================================================#


# Interactive cd, using fzf.
# Copied from:
# https://github.com/junegunn/fzf/wiki/Examples#interactive-cd
function c() {
    # When args are provided, `c` simply behaves like `cd`, no fuzzy.
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    # When no args are provided, it goes into interactive fzf navigation.
    while true; do
        local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &> /dev/null
    done
}



#=============================================================================#
#                                                                             #
#   ad88888ba   88        88  88        88  888888888888  88  88              #
#  d8"     "8b  88        88  88        88       88       88  88              #
#  Y8,          88        88  88        88       88       88  88              #
#  `Y8aaaaa,    88aaaaaaaa88  88        88       88       88  88              #
#    `"""""8b,  88""""""""88  88        88       88       88  88              #
#          `8b  88        88  88        88       88       88  88              #
#  Y8a     a8P  88        88  Y8a.    .a8P       88       88  88              #
#   "Y88888P"   88        88   `"Y8888Y"'        88       88  88888888888     #
#                                                                             #
#=============================================================================#

# scp with reversed order
#   scp file.txt target:/path/to/dst
#   pcs target:/path/to/dst file.txt
pcs(){ scp $2 $1 }

# cp with reversed order
pc(){ cp $2 $1 }

# dir and file stuff
# ==================
# Sort utils
srt() { sort -o "$1" "$1" }
unq() { sort "$1" | uniq -i }
dups() { sort "$1" | uniq -d }

# Diff files in the manner of git diff
gdiff () { diff -u $@ | colordiff | less -R; }

# dir stuff
mcd() { mkdir -p "$1" && cd "$1" }
cdl() { cd "$1" && ls -1FSshX --file-type }

# save console stdout and stderr to file (and display in console)
function shsv() { $@ 2>&1 | tee output.txt }

# get abspath of file(s)
function paths(){
    PTH="$PWD"
    if [ "$#" -gt 0 ]; then
        # rename link endpoint
        PTH="$1"
    fi
    ls -1 -d $PTH/*
}

# Symlink
# =======

# symlink a relpath source to destination.
function lnr(){
    # Init with cwd as the src, because it's me, and I know my assumptions.
    SRC=$PWD
    DST=$1
    if [ "$#" -eq  2 ]; then
        SRC=$1
        DST=$2
    fi
    # Symlink that puppy.
    ln -sf $(realpath $SRC) $DST
}

# symlink something to ~/.local/bin
function lnbin(){
    # make thing executable
    chmod +x "$1"
    # Set paths
    SRC="$PWD/$1"
    #DEST="$PATH_USER_BIN"
    DEST="$HOME/.local/bin"
    if [ "$#" -gt 1 ]; then
        # rename link endpoint
        #DEST="$PATH_USER_BIN/$2"
        DEST="$DEST/$2"
    fi
    # link it up (NB: -r converts abs symlinks to rel)
    #ln -sfr $SRC $DEST
    ln -sf $SRC $DEST
}

# symlink something to projects dir
function lnpro(){
    src="$PWD/$1"
    dst="$HOME/Projects"
    ln -sf $src $dst
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


function lsnew() {
    # USAGE: `lsnew {N} {path}`
    #   $ lsnew                 # will default to `lsnew 30 .`
    #                           # "show the 30 newest files in the curdir"
    #   $ lsnew 100 ~/.cache    # "show the 100 newest files in the cache dir"
    #
    # Print a date-sorted list of the oldest (top) --> newest (bot).
    local N="${1:-30}"
    local DIR="${2:-.}"
    TZ=Asia/Tokyo \
    find "$DIR" -type f -printf '%TY-%Tm-%Td %TH:%TM:%.2TS %p\n' | \
    sort -n | \
    tail -n "$N" | \
    sort -n
}



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Finding stuff
# =============
function find_and_remove_all(){
    matches=$(sudo find / -iname "*$1*")
    echo "$matches"
    echo -n "Do you want to proceed (y/N)? "
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        echo "Proceeding to remove all matches..."
        sudo find / -iname "*$1*" -exec rm -rf "{}" \;
        echo "Finished removal"
    else
        echo "ABORTED"
    fi
}

# Shortcut find
#function f(){
#    # SH
#    if [ "$#" -gt 1 ]; then
#        #=== find location specified
#        find "$1" -iname "*$2*"
#    else
#        #==== find from root
#        sudo find / -iname "*$1*"
#    fi
#}

# Shortcut find
#   includes file modified date.
f() {
    if [ "$#" -gt 1 ]; then
        #==== find from the path specified
        find "$1" -iname "*$2*" -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\n' | sed 's/\.[0-9]*/ /'    #| cut -d. -f1
    else
        #==== find from root
        sudo find / -iname "*$1*" -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\n' | sed 's/\.[0-9]*/ /'  #| cut -d. -f1
    fi
}



#=============================================================================#
#                                                                             #
#                        ,ad8888ba,   88  888888888888                        #
#                       d8"'    `"8b  88       88                             #
#                      d8'            88       88                             #
#                      88             88       88                             #
#                      88      88888  88       88                             #
#                      Y8,        88  88       88                             #
#                       Y8a.    .a88  88       88                             #
#                        `"Y88888P"   88       88                             #
#                                                                             #
#=============================================================================#

# TODO(evan): WIP, get "awesome" list (readme only, eventually).
#function getawe() {
#    # THIS NEEDS TO BE A PY SCRIPT.
#    # Exit if no git url provided.
#    if ! (( $# )); then
#        echo 'No target provided!'
#        return
#    fi
#
#    # Just log the timestamp and repo for now.
#    mkdir -p $DIR_DOTS
#    _AW_LOG="$DIR_DOTS/awesomes.log"
#    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)
#
#    echo "$_TIMESTAMP: $@" >> $_AW_LOG
#
#    # Dst.
#    _AW_PATH=$HOME/BigCloud/Sporks/AWESOMES
#    mkdir -p $_AW_PATH
#
#    cd $_AW_PATH
#    git clone --depth=1 $1
#
#    cd -
#}
#

function getawerdme() {
    # ASSUMES A RAW GH URL GIVEN AS INPUT!
    #https://raw.githubusercontent.com/btw-so/open-source-alternatives/main/README.md


    # Exit if no git url provided.
    if ! (( $# )); then return; fi

    # Just log the timestamp and repo for now.
    mkdir -p $DIR_DOTS
    _AW_LOG="$DIR_DOTS/awesomes.log"
    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)

    echo "$_TIMESTAMP: $@" >> $_AW_LOG

    # Dst.
    _AW_PATH=$HOME/BigCloud/Sporks/AWESOMES
    mkdir -p $_AW_PATH

    cd $_AW_PATH
    git clone --depth=1 $1

    cd -
}




#############

# Setup a default git config
function initgitconfig() {
    echo 'Setting up basic global gitconfig.'

    # Link up the global gitignore.
    ln -sf $HOME/.Dots/global_gitignore $HOME/.gitignore

    # Configure all base options.
    git config --global user.name "Evan C."
    git config --global user.email "evdcush@protonmail.com"

    git config --global core.excludesFile '~/.gitignore'
    git config --global init.defaultBranch master

    git config --global help.autocorrect 8  # 0.8s to cancel an auto-corrected command.

    # Use ssh instead of https for remotes (assumes you've added your keys).
    git config --global url.'git@github.com:'.insteadOf 'https://github.com/'

    echo 'The basic ~/.gitconfig has been made:'
    cat ~/.gitconfig
    echo '--------------------------------------'
    echo 'You need to now setup signing.'
    echo 'The following keys are available: '
    gpg -K --keyid-format=long && \
    gpg -K --with-colons | grep sec | cut -d':' -f 5

    echo 'If there is an appropriate key there, run the following commands:'
    echo 'git config --global commit.gpgsign true; git config --global user.signingkey '

}


# git clone && cd
function gcncd(){
    REPO_URL=$1
    git clone --depth=1 $REPO_URL
    cdl "$(basename $1 .git)"
}


# git clone and checkout all branches
function gitcloneall(){
    REPO_URL=$1
    git clone $REPO_URL
    cdl "$(basename $1 .git)"
    for branch in $(git branch --all | grep '^\s*remotes' | egrep --invert-match '(:?HEAD|master)$'); do
        git branch --track "${branch##*/}" "$branch"
    done
    cd ..
}


# Scorched earth
# ==============
function git-nuke(){
    #=== nuke targets
    TARGETS=$@
    echo -n "WARNING: git-nuke called on $TARGETS, do you want to proceed? (y/N): "
    read launch_confirmation
    if [ "$launch_confirmation" != "${launch_confirmation#[Yy]}" ] ;then
        echo "Proceeding to nuke"
        echo "NOTE: current .git is saved as GITBKP in case of SNAFU, and must removed manually\n"
        cp -r .git GITBKP

        #=== Delete specified files from hist
        git filter-branch --force --index-filter \
        "git rm --cached --ignore-unmatch $TARGETS" \
        --prune-empty --tag-name-filter cat -- --all

        #=== Cleanup refs
        git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
        git reflog expire --expire=now --all
        git gc --aggressive --prune=now

        #=== Push changes
        echo -n "\n\tLocal repo nuked; Do you want to force push to remote? (y/N): "
        read push_confirmation
        if [ "$push_confirmation" != "${push_confirmation#[Yy]}" ] ;then
            git push --all --prune --force  # will delete all branches not in local
        else
            echo "REMOTE PUSH ABORT\n  NOTE: local git changes persist"
            echo "\nTo restore git to pre-nuke state:"
            echo 'rm -rf .git; mv GITBKP .git; git reset HEAD --hard'
            echo "\nTo force push changes:"
            echo 'git push --all --prune --force'
        fi
    else
        echo "/tNUCLEAR STRIKE CANCELED"
    fi
}

# Get latest release urls from github, defaulting on zip
#  usage:
#   # get zip releases
#   $ get_release balena-io etcher
#
#   # get amd64 AppImage releases
#   $ get_release balena-io etcher amd64.AppImage
function get_release {
    # read args
    _USER="$1"
    _REPO="$2"
    _EXT='zip'
    if [ "$#" -gt 2 ]; then
        _EXT="$3"
    fi
    # format url and GET
    _HUB="https://api.github.com/repos/$_USER/$_REPO/releases/latest"
    _TARGET="browser_download_url.*$_EXT"
    wget -q -nv -O- $_HUB | grep $_TARGET | cut -d: -f 2,3 | tr -d '[:space:]"'
}


#------------------------------------------------------------------------------


# Write datetime & source spork-target repo to the log.
#function logTheSpork(){
#    # Acquire dst points.
#    _SPORK_LOG=$FILE_SPORK_LOG
#
#    # Get target.
#    target_repo=$1
#    echo "Adding $target_repo to the Sporks Log."
#
#    # Log the sporking.
#    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)
#    echo "$_TIMESTAMP $target" >> $_SPORK_LOG;
#}


# git@github.com:lencx/ChatGPT.git
# https://github.com/lencx/ChatGPT
# https://github.com/lencx/ChatGPT.git
# (TODO): https://github.com/lencx/ChatGPT/archive/refs/heads/main.zip

# Given some git url, clone it to sporks.
# ASSUMES: valid url passed as arg $1 or top of clipboard.
# TODO(evan): support archived repo download as well.
function spork(){
    # Get spork target URL.
    if [ "$#" -eq 0 ]; then
        echo 'No target given; will attempt to get arg from clipboard'
        target=`xclip -o -sel clip`
    else
        target=$1
    fi

    # Create the Sporks master dir.
    mkdir -p $DIR_SPORKS

    echo "TARGET REPO: $target"

    # Clone it.
    cd $DIR_SPORKS && git clone $target;

    # Log the Sporking.
    _SPORK_LOG=$FILE_SPORK_LOG
    echo "Adding $target_repo to the Sporks Log: $_SPORK_LOG"
    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)
    echo "$_TIMESTAMP $target" >> $_SPORK_LOG;

    # Go home.
    cd -;
}

# Horrendous, deplorable, lazy copy-paste, whatever.
# Exactly the same as `spork`, but with a shallow clone ayyyyyyyyyyyyyyyyyyy.
function spork1(){
    # Get spork target URL.
    if [ "$#" -eq 0 ]; then
        echo 'No target given; will attempt to get arg from clipboard'
        target=`xclip -o -sel clip`
    else
        target=$1
    fi

    # Create the Sporks master dir.
    mkdir -p $DIR_SPORKS

    echo "TARGET REPO: $target"

    # Clone it.
    cd $DIR_SPORKS && git clone --depth=1 $target;  # Here's the diff!

    # Log the Sporking.
    _SPORK_LOG=$FILE_SPORK_LOG
    echo "Adding $target_repo to the Sporks Log: $_SPORK_LOG"
    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)
    echo "$_TIMESTAMP $target" >> $_SPORK_LOG;

    # Go home.
    cd -;
}

function sporklog(){
    bat $FILE_SPORK_LOG
}


#------------------------------------------------------------------------------

# Given a url to upstream source, create a mirror of it in a priv repo.
# (in other words; a more discreet fork that can be private)
# example ssh: git@github.com:gpt-omni/mini-omni.git
#       https: https://github.com/gpt-omni/mini-omni.git
#      gh cli: gh repo clone gpt-omni/mini-omni
#       https: https://github.com/gpt-omni/mini-omni
function WIPWIPmirrorfork(){
    # Get spork target URL.
    if [ "$#" -eq 0 ]; then
        # No target given, get arg from clipboard.
        target=`xclip -o -sel clip`
    else
        target=$1
    fi

    # Logging stuffs.
    GIT_MIRROR_LOG="$HOME/Chest/git_mirror.log"
    _TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)

    # Formatting on target.
    echo "MIRRORING: $target"
    echo "$_TIMESTAMP $target" >> $GIT_MIRROR_LOG;
    repo_name=$(basename "$target" .git)

    # Clone the target as bare.
    projects_dir="$HOME/Projects"
    target_repo_path="$projects_dir/$repo_name"
    git clone --bare $target $target_repo_path

    # Create the mirror project
    gh repo create $repo_name --private
    mirror_dst="https://github.com/evdcush/$repo_name"

    # TODO!!!

}
