# vi: set ft=python :
import konch
import os
import sys
import code
import math
import string
import random
import itertools
import functools
import subprocess
import collections
from decimal import Decimal
from pprint import pprint

#import yaml
from ruamel.yaml import YAML
import numpy
import matplotlib.pyplot
import pyperclip
from pyperclip import copy as _CP

yaml = YAML()

# Handy Dandies
# =============
HOME = os.environ['HOME']

def shrun(cmd):
    subprocess.run(cmd, shell=True)

class AttrDict(dict):
    # just a dict mutated/accessed by attribute instead index
    # NB: not pickleable
    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__

    @classmethod
    def spec(cls): # since the class is preloaded in konch, this help refresh details
        specification = (
            "class AttrDict(dict):\n"
            "    __getattr__ = dict.__getitem__\n"
            "    __setattr__ = dict.__setitem__\n"
            "    __delattr__ = dict.__delitem__"
            )
        print(specification)

# Scratch space
# =============
CWD = os.path.abspath('.')
CACHE = HOME + '/.cache'
DOWNLOADS = HOME + '/Downloads'

def cdir(p):
    os.chdir(p)
    print(os.path.abspath('.'))

gocache = lambda: cdir(CACHE)
goback  = lambda: cdir(CWD)
godown  = lambda: cdir(DOWNLOADS)


# FILE RW
# =======
def R_file(fname):
    with open(fname) as file:
        return file.read().split('\n')

def W_file(fname, text, flag='w'):
    with open(fname, flag) as file:
        file.write(text)

# yaml stuff
# ----------
def R_yml(fname):
    with open(fname) as file:
        return yaml.load(file)

def W_yml(fname, obj):
    with open(fname, 'w') as file:
        yaml.dump(obj, file, default_flow_style=False)

_locals = dict(HOME=HOME, shrun=shrun, AttrDict=AttrDict,
               gocache=gocache, goback=goback, godown=godown,
               R_file=R_file, W_file=W_file,
               R_yml=R_yml, W_yml=W_yml,
               )


context = {
    'os': os,
    'sys': sys,
    'code': code,
    'math': math,
    'string': string,
    'random': random,
    'pprint': pprint,
    'Decimal': Decimal,
    'itertools': itertools,
    'functools': functools,
    'collections': collections,

    'np': numpy,
    'plt': matplotlib.pyplot,
    'yaml': yaml,
    'pyperclip': pyperclip,
    '_CP': _CP,
}

context.update(_locals)

# Available options:
#   "context", "banner", "shell", "prompt", "output",
#   "context_format", "ipy_extensions", "ipy_autoreload",
#   "ipy_colors", "ipy_highlighting_style", "ptpy_vi_mode"
# See: https://konch.readthedocs.io/en/latest/#configuration
konch.config({
    "context": context,
    "ipy_colors": 'linux',
    "ipy_highlighting_style": "piodine", # paraiso-dark!, rrt!, vim, pastie, perldoc
    "ipy_autoreload": True,
    "context_format": 'hide',

})


def setup():
    pass


def teardown():
    pass


"""
# ipy_highlighting_style (from pygment.styles)
['default',
 'emacs',
 'friendly',
 'colorful',
 'autumn',
 'murphy',
 'manni',  # =,. are black
 'monokai', # mediocre, as usual
 'perldoc',
 'pastie',
 'borland',
 'trac',
 'native',
 'fruity',
 'bw',
 'vim',
 'vs',
 'tango',         # light theme
 'rrt',
 'xcode',         # light theme
 'igor',          # nice!
 'paraiso-light', # light themes dont work in dark terminal
 'paraiso-dark',  # NICE
 'lovelace',      # not bad, a little soft
 'algol',         # NICE, monochrome, but has great bold
 'algol_nu',      # also nice, does italics instead underline
 'arduino',       # desat, soft, no
 'rainbow_dash',  # NICE, very colorful, saturated
 'abap',          # light theme
 'jupyter_python' # light theme
 ]
"""
