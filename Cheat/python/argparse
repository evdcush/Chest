```python
# Subparser
# =========
cli = argparse.ArgumentParser()
subparsers = cli.add_subparsers(dest='subcmd')

# IF YOU WANT TO HAVE ARGS AVAILABLE WITHOUT SUBCOMMAND
# YOU MUST ADD THEM BEFORE ADDING SUBPARSERS, eg:
'''
# PROPER ORDER: foo.py
cli = argparse.ArgumentParser()
cli.add_argument('name')
subparsers = cli.add_subparsers(dest='subcmd')
print(cli.parse_args())

# IMPROPER ORDER: baz.py
cli = argparse.ArgumentParser()
subparsers = cli.add_subparsers(dest='subcmd')
cli.add_argument('name')
print(cli.parse_args())

$ python foo.py
usage: foo.py [-h] name {} ...
$ python foo.py 'hello'
Namespace(name='hello', subcmd=None)

$ python baz.py
usage: baz.py [-h] {} ... name   # <-------- NOTE THE DIFFERENT ORDER
baz.py: error: the following arguments are required: name
$ python baz.py 'hello'
usage: baz.py [-h] {} ... name
baz.py: error: argument subcmd: invalid choice: 'hello' (choose from )
'''



# subcommand interface decorator
def argp(*names_or_flags, **kwargs):
    return names_or_flags, kwargs

def subcmd(*parser_args, parent=subparsers):
    """Decorator to define a new subcommand in a sanity-preserving way.

    The function will be stored in the ``func`` variable when the parser
    parses arguments so that it can be called directly like so::
        args = cli.parse_args()
        args.func(args)

    Usage example::
        @subcmd(argp("-d", help="Enable debug mode", action="store_true"))
        def foo(args):
            print(args)

    Then on the command line::
        $ python cli.py foo -d
    """
    def decorator(func):
        parser = parent.add_parser(func.__name__, description=func.__doc__)
        for args, kwargs in parser_args:
            parser.add_argument(*args, **kwargs)
        parser.set_defaults(func=func)
    return decorator

@subcmd()
def nothing(args):
    print("Nothing special!")

#==== Samples
@subcmd(argp('-d', help='debug mod', action='store_true'))
def test(args):
    print(args)

@subcmd(argp('-f', '--filename', help="A thing with a filename"))
def filename(args):
    print(args.filename)

@subcmd(argp('name', help='Name'))
def name(args):
    print(args.name)

#==== main func
if __name__ == '__main__':
    args = cli.parse_args()
    if args.subcmd is None:
        cli.print_help()
    else:
        args.func(args)

```


```python
# At a glance
# ===========
parser = argparse.ArgumentParser(description='Processing integers.') # description of program
parser.add_argument('integers',  # arg name; if prefixed '-', becomes optional
                    metavar='N', # how the arg is referred in help msg
                    type=int,    # type conversion
                    nargs='+',   # indicates 1 or more vals to be passed to arg
                    help='integer args') # help msg

# parser
# ======
parser = argparse.ArgumentParser(description=__doc__) # uses file __doc__

# arguments
# =========
# an action-like option with a default
add_args('-b', '--baz', nargs='?', default=None, const='x', type=str)

#    Nothing                 Default                        Option
parser.parse_args();  parser.parse_args(['-b']);  parser.parse_args(['-b', '$'])
Namespace(baz=None);  Namespace(baz='x');         Namespace(baz='$')

# 'nargs' arg
nargs='?' # 1 or None values; atomic; can fall back on default if no arg
nargs='*' # 0 or more values;   list; can fall back on default if no arg
nargs='+' # 1 or more values;   list; cannot fall back on default

# restricting choices
add_args('--color', default='green', choices=['red', 'blue', 'yellow', 'green'])

# append
# ======
parser.add_argument('--baz', action='append')
# >>> python aparse.py
# aparse.py: error: argument -b/--baz: expected one argument
# >>> python aparse.py --baz 'hello'
# Namespace(baz=['hello'])
# >>> python aparse.py --baz 'hello' --baz 'there' --baz 'friend'
# Namespace(baz=['hello', 'there', 'friend'])

####  OTHER ARGPARSERS  ####
# Fire
# ====
from fire import Fire

def neg(num):
    return -num

def foo(location='floor'):
    return f'foo on the {location}'

if __name__ == '__main__':
  # Fire()      # both neg and foo available at CLI, but can only use one :[
  # Fire(foo)  # 'fire_example.py airplane' ---> `foo on the airplane`

```

