import math
import bisect
import random
"""
Weights define a probability distribution function (pdf).

Random numbers from any such pdf can be generated by
applying its associated inverse cumulative distribution
function (CDF) to **uniform random nums between 0 and 1.**

If Y has a U[0,1] distribution,
    then F⁻¹(Y) is distributed as F.

This is used in RNG using the inverse transform sampling-method,
which is what is implemented here.
"""
def cdf(weights):
    """ cdf used for inverse transform sampling method """
    total = sum(weights)
    res = []
    cumsum = 0
    for w in weights:
        cumsum += w
        res.append(cumsum / total)
    return res

def choice(population, weights):
    assert len(population) == len(weights)
    cdf_vals = cdf(weights)
    u = random.random() # [0.0, 1.0)
    i = bisect.bisect(cdf_vals, u)
    return population[u]

def choice_simple(weights):
    """ return idx selected with probs p from weights """
    total = sum(weights)
    u = random.uniform(0, total)
    psum = 0
    for i, w in enumerate(weights):
        if psum + w >= u:
            return i
        psum += w
    raise Exception('ERROR in choice')
