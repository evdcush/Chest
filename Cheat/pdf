#==================================  tools  ==================================#

# Install pdfjam (part of the texlive pkg)
# ----------------------------------------
## pdfjam provides many other aliased functions: pdfjoin, pdftoppm, etc.
sudo apt install --no-install-recommends --no-install-suggests texlive-extra-utils

## others
sudo apt install -y pandoc wkhtmltopdf weasyprint inkscape


# PDF cropping
# ============
## primary tool: pdfCropMargins (primarily CLI, but also has GUI)
pip install -U pdfCropMargins

## GUI app: PDF Arranger
##   honestly, this makes life so much easier here
##   https://github.com/pdfarranger/pdfarranger
flatpak install flathub com.github.jeromerobert.pdfarranger


#==================================  usage  ==================================#

#-----------------------------------  CROP  ----------------------------------#

pdf-crop-margins -s -u myfile.pdf

# Examples
# uniformly pad left bot right top margins (5% pad to L/R, 10% pad to T/B)
# L B R T
pdf-crop-margins -u -p4 105 110 105 110 RLbook2020trimmed.pdf

## Only apply crop operation to the pages specified.
##   (NB: still outputs all pages, but only the specified ones are cropped)
pdf-crop-margins -s -u --pages 449-507 d2l-en.pd

## Only crop the pages from page 2 on (USEFUL FOR ARXIV PAPERS).
pdf-crop-margins -s -u --pages 2-19 'Wang et al - 2024 - N-Agent Ad Hoc Teamwork.pdf'


## APPLY CROP BOX
# Sometimes, the typical `croparxpdf` doesn't work because of a few snowflake
# pages. These pages can ruin the entire cropped pdf.
# In these use-cases, it is often necessary to crop to a hard-coded BBOX.
# Here's how you do it!

### First, get the boxes for the file to find the snowflakes:
# *REMEMBER, BOXES ARE ALWAYS: left, bottom, right, top; origin at left-bottom.
pdfcropmargins --writeCropDataToFile galaxybrain2049.txt GalaxyBrain-2049.pdf

## You will see a txt file with one array of floats per page, eg:
###    1    [16.19994668, 12.59996796, 548.09819614, 757.79807281]
###    2    [64.79978674, 12.59996796, 548.09819614, 694.79823303]
###    3    [64.79978674, 12.59996796, 548.09819614, 757.79807281]
###    4    [64.79978674, 12.59996796, 548.09819614, 757.79807281]
###    5    [64.79978674, 12.59996796, 547.1981991, 757.79807281]
###    6    [64.79978674, 12.59996796, 548.09819614, 757.79807281]
###    7    [64.79978674, 12.59996796, 547.1981991, 757.79807281]
###    8    [64.79978674, 12.59996796, 547.1981991, 757.79807281]
###    9    [64.79978674, 12.59996796, 547.1981991, 757.79807281]

## Figure out the snowflakes, and decide on a crop box that will work for all.
## Keep in mind: these crop boxes are TIGHT; much tighter than a typical
## pdfcropmargins crop! So you must pad as well!
##    REMEMBER:
##      LEFT:   pad by *reducing* L number
##      BOTTOM: pad by *reducing* B number
##      RIGHT:  pad by *adding* R number
##      TOP:    pad by *adding* T number

### Crop that shit (adding padding, ESPECIALLY Left & RIGHT!):
pdfcropmargins --uniform -ssp 80 20 560 730 --pages 2-56 Thomas\ et\ al\ -\ 2024\ -\ STAR.pdf

DID NOT WORK! STILL HAVEN'T GOTTEN THIS BS DOWN!  # <--- UPDATE: flatpak run com.github.jeromerobert.pdfarranger


#------------------------------  Extract, Join  ------------------------------#

# Extract PDF pages
# -----------------
pdfjam <input file> <page ranges> -o <output file>
pdfjam original.pdf 3-8 -o out.pdf
pdfjam original.pdf 3-8,15-29,63-29 -o out.pdf


# Join PDF pages
# --------------
pdfjoin file1 file2 2- file3 '3,7-9,14-' -o joined.pdf

# what actually worked (pdfjoin no like no spec page for file1)
pdfjoin pnet2.pdf 1 pnet2_full.pdf 2- -o pointnet2.pdf

# Export PDF page as an image
# ---------------------------
# Use `pdftoppm` (from apt pkg `poppler-utils`).
# Export the first page (-f 1), and only the first page (-l 1) of a pdf
# as a png (-png) or (-jpeg) image, output as `foo-001.png`
pdftoppm -f 1 -l 1 -png foo.pdf foo



#-----------------------------------  hax  -----------------------------------#

# Remove a watermark
# ------------------
#=== cut watermark text from pdf code
sed -e "s/watermarktextstring/ /g" <input.pdf >unwatermarked.pdf

#=== fix modified pdf
pdftk unwatermarked.pdf output fixed.pdf && mv fixed.pdf unwatermarked.pdf

Downloaded from http://direct.mit.edu/evco/article-pdf/31/2/81/2133989/evco_a_00325.pdf by guest on 26 June 2023
sed -e "s/Downloaded from http:\/\/direct.mit.edu\/evco\/article-pdf\/31\/2\/81\/2133989\/evco_a_00325.pdf by guest on 26 June 2023/ /g" evco_a_00325.pdf > unwatermarked_evco_a_00325.pdf

pdftk unwatermarked_evco_a_00325.pdf output fixed_evco_a_00325.pdf



#==============================  TOOL-SPECIFIC  ==============================#

# PANDOC
# ======

pandoc -H deeplists.tex --pdf-engine=xelatex -V geometry:margin=2cm --from gfm README.md -o tuning_guide_v11.pdf

deeplists.tex:
```
   \usepackage{enumitem}
   \setlistdepth{9}

   \setlist[itemize,1]{label=$\bullet$}
   \setlist[itemize,2]{label=$\bullet$}
   \setlist[itemize,3]{label=$\bullet$}
   \setlist[itemize,4]{label=$\bullet$}
   \setlist[itemize,5]{label=$\bullet$}
   \setlist[itemize,6]{label=$\bullet$}
   \setlist[itemize,7]{label=$\bullet$}
   \setlist[itemize,8]{label=$\bullet$}
   \setlist[itemize,9]{label=$\bullet$}
   \renewlist{itemize}{itemize}{9}

   \setlist[enumerate,1]{label=$\arabic*.$}
   \setlist[enumerate,2]{label=$\alph*.$}
   \setlist[enumerate,3]{label=$\roman*.$}
   \setlist[enumerate,4]{label=$\arabic*.$}
   \setlist[enumerate,5]{label=$\alpha*$}
   \setlist[enumerate,6]{label=$\roman*.$}
   \setlist[enumerate,7]{label=$\arabic*.$}
   \setlist[enumerate,8]{label=$\alph*.$}
   \setlist[enumerate,9]{label=$\roman*.$}
   \renewlist{enumerate}{enumerate}{9}
```

