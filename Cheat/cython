```cython
#---- .pyx header (add this to the top of any .pyx file)
# distutils: language = c++
# cython: language_level=3


# def, cdef, cpdef
# ================
There are two kinds of funcs in cython: py and c funcs

def : python functions
    in  : pyobj
    out : pyobj

cdef : C functions
    in  : pyobj | C values
    out : pyobj | C values

Withing a cython module, py and c funcs can call each
other freely, ONLY PYTHON functions can be called
from outside the module by CPython code.

cpdef is hybrid of def, cdef. It can be called
anywhere, and dispatches to C or py depending
on caller. Overhead, so slower.


# File types
# ==========
.pyx, .py : implementation files
.pxd : definition files (ie headers)
.pxi : include files


# Run steps
# =========
#---- write a distutils/setuptools setup.py

#---- Full specified method
# run cython compiler to generate C file
cython foo.pyx

# C compiler to generate a C file (switch -a to gen foo.html)
gcc -shared -pthread -fPIC -fwrapv -O2 -Wall \
-fno-strict-aliasing -I/home/evan/.pyenv/versions/3.7.2/include/python3.7m \
-o foo.so foo.pyx

# Run python interpreter, import module
import foo

#---- pyximport
# For simple cython builds (no extra C libraries, no special building setup)
#  pyximport allows you to build cython modules and import them like py
import pyximport; pyximport.install()
import my_cy_mod
```
