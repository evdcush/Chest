import os
import sys
import code
import math
import random
from itertools import permutations, combinations, accumulate, reduce

#-----------------------------------------------------------------------------#
#                         PEARLS & FREQUENT REFERENCE                         #
#-----------------------------------------------------------------------------#

#==== gotchas
# make an NxM matrix properly
matrix = [[0]*ncols for _ in range(nrows)]  # BAD_MAT = [[0] * ncols] * nrows # DONT


#==== comprehensions
double_for = [(i,j) for j in range(5) for i in range(3)] # [(0,0), (1,0), ..., (2,4)]
with_if   = [i for i in range(20) if i & 1] # odds
set_comp  = set(i for i in range(20) if i & 1)
dict_comp = {i: i**2 for i in range(20) if i & 1}

#==== COPY
copy.copy(x)     # shallow copy: you almost never want this (still has references)
copy.deepcopy(x) # deep copy: what you think of when you think copy, FULL recursive copy


"""
# How to make your 'foo.py' script executable bin

1. put this at the top of script:
    #!/usr/bin/env python

2. `chmod +x foo.py`  # you are already finished at this step

3. ln -sf foo.py dir/thats/in/PATH/foo

# Call like you would other bins from cli:
$ foo
"hello there"

$ foo airplane
"hello there airplane"

"""



#-----------------------------------------------------------------------------#
#                                   RECIPES                                   #
#-----------------------------------------------------------------------------#

#------------------
class AttrDict(dict):
    # just a dict mutated/accessed by attribute instead index
    # NB: not pickleable
    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__

    @classmethod
    def spec(cls): # since the class is preloaded in konch, this help refresh details
        specification = (
            "class AttrDict(dict):\n"
            "    __getattr__ = dict.__getitem__\n"
            "    __setattr__ = dict.__setitem__\n"
            "    __delattr__ = dict.__delitem__"
            )
        print(specification)



#==== strip punctuation from string
def translate_strip(s):
    table = str.maketrans({key: None for key in string.punctuation})
    t = s.translate(table)
    return t

def re_strip(s): # marginally faster than translate
    t = re.sub(r'[^\w\s]', '', s)
    return t

#==== matrix
def mk_matrix(N, M, fill=0):
    mat = [[fill] * M for _ in range(N)]
    return mat

def dot_prod(v1, v2):
    return sum(map(operator.mul, v1, v2))

#==== combinatorial shit
def powerset(S):
    pS = []
    combo = lambda i: set(itertools.combinations(S, i))
    for i in range(len(S)):
        pS.append(combo(i))
    return pS

def ordered_combos(lst):
    idx_slices = itertools.combinations(range(len(lst) + 1), 2)
    combos = []
    for i, j in idx_slices:
        combos.append(lst[i:j])
    return combos

#==== RNG
def choice_simple(weights):
    """ return idx selected with probs p from weights """
    total = sum(weights)
    u = random.uniform(0, total)
    psum = 0
    for i, w in enumerate(weights):
        if psum + w >= u:
            return i
        psum += w
    raise Exception('ERROR in choice')


#-----------------------------------------------------------------------------#
#                                    NEAT                                     #
#-----------------------------------------------------------------------------#

#==== XKCD-style passhrase
def gen_passphrase(num_words=4, sep=' '):
    import re
    from secrets import choice
    with open('/usr/share/dict/words') as dwords:
        words = [w.strip() for w in dwords]
        pwords = sep.join(choice(words) for i in range(num_words))
        passphrase = re.sub(r'[^\w\s]', '', pwords).lower()
    return passphrase


#-----------------------------------------------------------------------------#
#                                    TOOLS                                    #
#-----------------------------------------------------------------------------#

#==== ITERTOOLS
#https://docs.python.org/3/library/itertools.html

# infinite iterators (basically for generators)
cnt = itertools.count() # (c.__next__(), c.__next__()) == (0,1)
cyc = itertools.cycle('abc') # --> a b c a b c a b...
five_tens = list(itertools.repeat(10, 5)) # [10,10,10,10,10]

# COMBINATORIC

# Permutations, nPr
list(itertools.permutations([2,5,0,1]))
#   r = None         r = 2
# [(2, 5, 0, 1),  # [(2, 5),list()
#  (2, 5, 1, 0),  #  (2, 0),
#  (2, 0, 5, 1),  #  (2, 1),
#  (2, 0, 1, 5),  #  (5, 2),
#  (2, 1, 5, 0),  #  (5, 0),
#  (2, 1, 0, 5),  #  (5, 1),
#  (5, 2, 0, 1),  #  (0, 2),
#  (5, 2, 1, 0),  #  (0, 5),
#  (5, 0, 2, 1),  #  (0, 1),
#  (5, 0, 1, 2),  #  (1, 2),
#  (5, 1, 2, 0),  #  (1, 5),
#  (5, 1, 0, 2),  #  (1, 0)]
#  (0, 2, 5, 1),  #
#  (0, 2, 1, 5),  #
#  (0, 5, 2, 1),  #
#  (0, 5, 1, 2),  #
#  (0, 1, 2, 5),  #
#  (0, 1, 5, 2),  #
#  (1, 2, 5, 0),  #
#  (1, 2, 0, 5),  #
#  (1, 5, 2, 0),  #
#  (1, 5, 0, 2),  #
#  (1, 0, 2, 5),  #
#  (1, 0, 5, 2)]  #

# Combinations nCr
list(itertools.combinations([2,5,0,1], 2))
[(2, 5), (2, 0), (2, 1), (5, 0), (5, 1), (0, 1)]


#==== FUNCTOOLS
#https://docs.python.org/3/library/functools.html
@functools.lru_cache(maxsize=5)


#==== BISECT
# returns the index where to insert i, assuming L is sorted
L = [-2, 0, 2, 4, 5, 8, 11]
bisect.bisect(L, 6) # ----> 5; L[:5] <= 6, L[5:] > 6
bisect.bisect(L, 1) # ----> 2; L[:2] <= 1, L[2:] > 1
bisect.bisect(L, 5) # ----> 5; L[:5] <= 5, L[5:] > 5
bisect.insort(L, 7) # ----> [-2, 0, 2, 4, 5, 7, 8, 11]



#-----------------------------------------------------------------------------#
#                                  OS  SH                                     #
#-----------------------------------------------------------------------------#

#==== OS / GLOB / Files & Dirs

#== Glob
# get all numbered files
glob.glob('./[0-9].*')

# get all pdfs from curdir tree
glob.glob('**/*.pdf', recursive=True)  # '**' needed for recursive globs

# get all pdfs from curdir with abspaths
[os.path.abspath(g) for g in glob.glob('./**/*.pdf', recursive=True)]


#==== MIMETYPES

#-----------------------------------------------------------------------------#
#                              DATA STRUCTURES                                #
#-----------------------------------------------------------------------------#

####  SET  ####
A = set(['a', 'b', 'c'])
P = set([1,2,3,4])
Q = set([3,4,5,6])
R = set([1,2,3,4,5,6])

# NB: Assume each update op is on a copy of original

# Misc
A.add('x') # A no {'a', 'b', 'c', 'x'}
A.remove('z') # KeyError; remove raises KeyError if not present
A.discard('z') # OKAY (no keyerror), discard removes IF present

A.isdisjoint(P) == (A & P == set()) # no elems of A in P

# Subset and proper subset
P <= R and P.issubset(R) and P < R # True; P is a proper subset of R
P <= P and not P < P # P is a subset of P; but NOT a proper subset

# Superset
R >= Q and R.issuperset(Q) # True; R is a superset of Q
R > R # False; R is NOT a proper subset of itself (R >= R, but not R != R)

# Union
P | Q == P.union(Q) == R # {1,2,3,4,5,6}
P |= ['foo', 'bar', 3, 11] # P == {1,2,3,4,11,'foo','bar'}
P.update({'a': True, 'fog': 'cool', 7: 'lucky?'}) # P == {1,2,3,4,7,'a','cool'}

# Intersection
P & Q == P.intersection(Q) == set([3,4])
P &= set([9,4,1]) # {1,4}
P.intersection_update([6,5,1,3,1]) # {1, 3}

# Difference  (order matters !)
R - Q == R.difference(Q) == set([1,2])
A -= ['f', 'o', 'c', 'b'] # {'a'}
A.difference_update(Q) # {'a', 'b', 'c'}

# XOR
P ^ Q == P.symmetric_difference(Q) == set([1,2,5,6])
P ^= Q # {1,2,5,6}
P.symmetric_difference_update(R) # {5,6}


#==== ARRAY

#==== COLLECTIONS

#==== TYPES.SimpleNamespace


#-----------------------------------------------------------------------------#
#                                 ALGORITHMS                                  #
#-----------------------------------------------------------------------------#

#==== HEAPQ


#-----------------------------------------------------------------------------#
#                                   NUMERIC                                   #
#-----------------------------------------------------------------------------#
# honorable mentions: decimal(for float stuff), cmath(math for complex nums)
#==== MATH
# math: ceil, floor, fabs, fmod, fsum, isclose, isinf isnan isfinite
#       exp, log, log1p, sqrt, sin cos tan, asin/cos/tan/tan2
#       sinh tanh cosh, asinh/cosh/tanh
math.factorial(x) # x!
math.log(16, 4) == 2.0
math.gcd(42, 24) == math.gcd(18, 6) == 6
math.expm1(x) # exp(x) - 1, without loss of precision
math.degrees(angle) # radians --> degrees
math.radians(angle) # degrees --> radians

def phi(x): # cumulative distrib func for the standard norm dist; erf <-- error func
    return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

# constants
math.pi  # 3.141592...
math.e   # 2.718281...
math.tau # 6.283185... # circle constant == 2pi, ratio circumference to radius
math.inf # floating point pos infinity == float('inf')
math.nan # fp for NaN == float('nan')


#=== FRACTION
from fractions import Fraction
Fraction(16, -10) == Fraction(-8, 5) # Fraction automatically reduces to rhs
Fraction('3/7')   # Fraction(3, 7)
Fraction('-.125') # Fraction(-1, 8)
Fraction('7e-6')  # Fraction(7, 1000000)
Fraction(2.25)    # Fraction(9, 4)
Fraction(.5) + 2.234  # --> 2.734
from decimal import Decimal
Fraction(1.1) # Fraction(2476979795053773, 2251799813685248)
Fraction(Decimal('1.1')) # Fraction(11, 10)

#=== DECIMAL
# WHY?: decimal module provides support for FAST, CORRECTLY-ROUNDED fp arithmetic
1.1 + 2.2 == 3.3000000000000003
float(Decimal('1.1') + Decimal('2.2')) == 3.3


#==== STATISTICS
statistics.mean(nums)   # what you think
statistics.median(nums) # yep
statistics.median_low([1,3,5,7]) == 3 # USE THIS FOR non-numeric DATA
statistics.median_high([1,3,5,7]) == 5 # USE THIS FOR non-numeric DATA
statistics.variance(data, xbar=None) # xbar is mean of data
statistics.stdev(data, xbar=None) # xbar is mean of data


#==== RANDOM
k = random.randint(a, b) # a <= k <= b; alias randrange(a, b+1)
x = random.random()      # 0.0 <= x < 1.0
y = random.uniform(a, b) # a <= y < b
k = random.randrange(5)  # k in [0,1,2,3,4]; (start, stop) also
random.gauss(mu, sigma) # exactly what you think
# seq
random.choice(seq) # return random elem from seq
random.choices(seq, weights=None, k=3) # select k elem WITH REPLACEMENT
random.sample(seq, k) # select k unique elem from seq, WITHOUT REPLACE
random.shuffle(seq) # shuffle seq IN PLACE


#-----------------------------------------------------------------------------#
#                                   STRING                                    #
#-----------------------------------------------------------------------------#

#==== f string (and .format)
b = 'baz'; my_float = 2**(1/2);
print(f'{my_float}') # 1.4142135623730951
print(f'{my_float: .3f}') # 1.414
print(f'|{b:<12}|')  # ---> |baz         |
print(f'|{b:^12}|')  # ---> |    baz     |
print(f'|{b:>12}|')  # ---> |         baz|
print(f'|{b:*<12}|') # ---> |baz*********|
print(f'|{b:0^12}|') # ---> |0000baz00000|
print(f'|{b:^>12}|') # ---> |^^^^^^^^^baz|
print(f'{num:03}')   # ---> 007
print(f'{11:03}')    # ---> 011

# str methods
# -----------
#==== Padding and formatting
# case
'OKAY'.lower()  # 'okay'
'quiet'.upper() # 'QUIET'
'chainer'.capitalize() # 'Chainer'
'Hello friend!'.title() # 'Hello Friend!'

# pad
'foo'.center(9)     # '   foo   '
'foo'.ljust(9)      # 'foo      '
'foo'.rjust(9, '+') # '++++++foo'
'california'.center(9) # 'california'
'11'.zfill(5) # '00011'


#==== IS
'123'.isdigit()  # True
'1.23'.isdigit() # False

'Hello123'.isalnum()    # True
'Hello123 '.isalnum()   # False

'Hello'.isalpha() # True; alphabet only True

'Hello there friend! It is 13:13'.isascii()   # True
'Hello there friend! It is 13時13分'.isascii() # False

'an all.123 lower-case string!'.islower() # True
'LOUD VOICES!'.isupper() # True
'Mr. Smith'.istitle() # True
'Chainer'.istitle()    # True
'TensorFlow'.istitle() # False
'Lake Titicaca'.istitle() # True

# OTHER IS METHODS: str.isspace, str.isprintable, str.isidentifier, str.isdecimal


#==== STRIP  str.strip([chars]) : all permutations of chars are stripped
'  hello there  '.strip() # 'hello there'
'https://arxiv.org/pdf/1701.08734.pdf'.strip('htps:/.df') # 'arxiv.org/pdf/1701.08734'
# str.lstrip, str.rstrip also available

#==== STARTSWITH  str.startswith(prefix[,start[,end]])
'https://arxiv.org/pdf/1701.08734.pdf'.startswith('http')   # True
'https://arxiv.org/pdf/1701.08734.pdf'.startswith('arx')    # False
'https://arxiv.org/pdf/1701.08734.pdf'.startswith('arx', 8) # True
#== ENDSWITH
'https://arxiv.org/pdf/1701.08734.pdf'.endswith('pdf') # True

#==== SPLIT  str.split(sep=None, maxsplit=-1)
>>> '/home/evan/Chest/Cheat/py'.split('/')
['', 'home', 'evan', 'Chest', 'Cheat', 'py']

>>> '/home/evan/Chest/Cheat/py'.split('/', maxsplit=3)
['', 'home', 'evan', 'Chest/Cheat/py']

>>> '  mixed    whitespace widths  '.split(' ')
['', '', 'mixed', '', '', '', 'whitespace', 'widths', '', '']

>>> '  mixed    whitespace widths  '.split()
['mixed', 'whitespace', 'widths']
# str.rsplit and str.lsplit also available





#==== STRING
import string
# constants
string.ascii_letters == 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
string.ascii_lowercase == 'abcdefghijklmnopqrstuvwxyz'
string.ascii_uppercase == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
string.digits == '0123456789'
string.hexdigits == '0123456789abcdefABCDEF'
string.punctuation == '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
string.whitespace == ' \t\n\r\x0b\x0c'


#-----------------------------------------------------------------------------#
#                                  STL; MISC                                  #
#-----------------------------------------------------------------------------#
"""
Overview of modules available in STL (but not expanded here)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

difflib : matching sequences
    eg difflib.get_close_matches(w, seq) gets words close to w in seq
    can do alot with difflib, can do CLI stuff too

struct : interpret bytes as packed binary data
    have used before for unpacking datasets stored as binaries (nbody sims)

abc : abstract base classes



"""

#=== DATETIME
d = datetime.datetime.now().date() # datetime.date(2019, 2, 28)
d.year; d.month; d.day; # 2019; 2; 28;
str(d) # '2019-02-28'


#==== SECRETS
# random stuff for crypt
secrets.token_hex(12) # '6b0394da5fa4ac285ea8592c'
secrets.token_urlsafe(12) # 'ZuXCa8ummIt8V1-h'
secrets.token_urlsafe()   # 'cZOZlQ4mdwSgfoToQmeHupvRuAVrX-FeG8hSRbeJkrU'



#==== ops
# bitwise
int.bit_length(6) == 3 == len('0b110'[2:])
x | y  # OR
x ^ y  # XOR
x & y  # AND
x << y; x >> y; # shifts
~x # twos comp (bits inverted) == -x - 1

# bytes
(1024).to_bytes(4, 'big') # b'\x00\x00\x04\x00'; hex(1024): 0x400
hex(1000) # '0x3e8'
(1000).to_bytes(4, 'little') # b'\xe8\x03\x00\x00'


#==== BUILTINS
id(s) # returns unique integer identity of object s
divmod(8, 5) == (1, 3) == (8 //5, 8 % 5)
ord('a') == 97 and chr(97) == 'a'
any([0,0,1,0]) == not all([0,0,1,0]) == True

# iter over seq
list(filter(lambda i: i & 1 == 0, [1,2,3,4,5,6])) == [2,4,6]
list(map(lambda i: i - 1, [1,2,3,4])) == [0,1,2,3]

#-----------------------------------------------------------------------------#
#                              PROCESS & THREAD                               #
#-----------------------------------------------------------------------------#
