#!/bin/bash

##############################################################################
#                                                                            #
#       ad88888ba   88888888888  888888888888  88        88  88888888ba      #
#      d8"     "8b  88                88       88        88  88      "8b     #
#      Y8,          88                88       88        88  88      ,8P     #
#      `Y8aaaaa,    88aaaaa           88       88        88  88aaaaaa8P'     #
#        `"""""8b,  88"""""           88       88        88  88""""""'       #
#              `8b  88                88       88        88  88              #
#      Y8a     a8P  88                88       Y8a.    .a8P  88              #
#       "Y88888P"   88888888888       88        `"Y8888Y"'   88              #
#                                                                            #
##############################################################################

#==============================================================================
#                     Preinstallation Steps and Notes                         #
#==============================================================================

# Installation Media
#-----------------------------
#===== Bootable ISO
# Nothing has EVER worked for me in making a bootable USB drive other than
# "Universal USB Installer, pendrive," which, of course, is Windows only
#  * TRIED: Rufus, unetbootin (trash), dd, "bootiso" (trash), gparted
#  * WORKS: UUI, distro-provided tools (tails, kali, etc), etcher
#  * etcher : etcher is a potential, platform-invariant solution; install
#             worked on my laptop, but UEFI installation is unconfirmed

#===== Troubleshooting
# If things are failing with the USB
#  * try a different, non-3.0 port
#  * not a "hub" port, like the front ones near power or otherwise joint hubs
#  * insure USB is FAT32, MBR table (GPR never works)



# Installer
#-----------------------------
#===== Options
# - DO NOT CONNECT TO INTERNET/DOWNLOAD DURING INSTALL
#   - Remove bloat first
#     ONLY AFTER REMOVING BLOAT, should you even connect to internet
#
# - Do not install 3rd party shit (for wifi/video/flash etc)
#   - you can install what you need later, and flash 2018 lol


# Remove useless shit from default PATH
#--------------------------------------
#===== /usr/games
sudo vi /etc/environment
# delete '/usr/games:/usr/local/games' near the end

px="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
py="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#    _ __    _   _   _ __    __ _    ___
#   | '_ \  | | | | | '__|  / _` |  / _ \
#   | |_) | | |_| | | |    | (_| | |  __/
#   | .__/   \__,_| |_|     \__, |  \___|
#   | |                      __/ |
#   |_|                     |___/
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#==============================================================================
#                               Remove Bloat                                  #
#==============================================================================

# - During this process, all '*desktop' packages will likely get removed.
#   - this includes: gnome-desktop, mate-desktop, xubuntu-desktop
#     * DON'T WORRY! These packages are just the bundles of default apps
#       That come with those respective desktops
#


# Desktop and Apps
#-----------------------------
# Note: there may be some redundancy
#===== Default desktop shit: Apps, libraries
arp mate-desktop-common mate-calc-common mate-calc mugshot cheese-common libgnome-games-support-common
arp gnome-*
arp "*mate-desktop*"
arp "*firefox*" "transmission-*" "*pidgin*" "*parole*" "*xfburn*" "*libreoffice*"
arp "hplip*" "sgt*" "snapd*" simple-scan "thunderbird*" "*yelp*"
arp catfish devhelp glade xul-ext-ubufox

# Printer shit
#--------------
arp printer-driver-splix printer-driver-sag-gdi printer-driver-pxljr printer-driver-ptouch printer-driver-pnm2ppa printer-driver-min12xxw printer-driver-m2300w printer-driver-foo2zjs-common printer-driver-foo2zjs printer-driver-c2esp


# Fonts
#-----------------------------
# - I like to keep my font directory clean: only the fonts I want

#===== Purge unwanted and non-English fonts (almost entirely south-Asian)
#  Note:
#    - this is the COMPLETE LIST
#    - you WILL get tofu sometimes
arp fonts-tlwg* fonts-thai* fonts-liberation* fonts-smc* fonts-liberation2* fonts-kacst* fonts-samyak* fonts-lao* fonts-deva* fonts-gujr* fonts-knda* fonts-guru* fonts-navilu* fonts-orya* fonts-beng* fonts-khmeros* fonts-mlym* fonts-lklug* fonts-sil* fonts-taml* fonts-sahadeva* fonts-sarai* fonts-lohit* fonts-gubbi* fonts-nakula* fonts-telu* fonts-kalapi* fonts-indic* fonts-gargi* fonts-pagul*

# Desired fonts that may get removed or scheduled for autoremove
afi fonts-opensymbol
afi fonts-symbola
afi fonts-sil-gentiumplus
afi fonts-freefont-ttf

#===== Noto is nice, but it also has about 50 extra languages
#  Instead, I download Noto from source, remove the extra langs from the .db
arp "fonts-noto*"


# Clean
#------------------------------------------------------------------------------
sudo apt autoremove



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#             _             _    _
#            (_)           (_)  | |
#             _    _ __     _   | |_
#            | |  | '_ \   | |  | __|
#            | |  | | | |  | |  | |_
#            |_|  |_| |_|  |_|   \__|
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#=============================================================================#
#                  Package manager setup and helpful aliases                  #
#=============================================================================#

# Apt fast
#------------------------------------------------------------------------------
sudo add-apt-repository ppa:apt-fast/stable
sed -i "$ a MIRRORS=( 'http://mirror.picosecond.org/ubuntu/,http://mirror.enzu.com/ubuntu/,http://la-mirrors.evowise.com/ubuntu/,http://mirrors.ocf.berkeley.edu/ubuntu/,http://mirror.math.ucdavis.edu/ubuntu/' )" /etc/apt-fast.conf



#                    Helpful setup aliases and funcs
#-----------------------------------------------------------------------------#

# Package manager and sudo
#-------------------------------------
#==== DEB
alias di="sudo dpkg -i"

# APT
#-------
apf='sudo apt-fast'
#==== install/update
alias af="$apf"
alias afu="$apf update"
alias afg="$apf upgrade"
alias afug="$apf update && $apf upgrade -y"
alias affu="$apf full-upgrade"
alias afi="$apf install"
#==== purge shit
alias afr="$apf remove"
alias afrp="$apf remove --purge"
alias afa="$apf autoremove"
alias afc="$apf clean"
#==== package info
alias afl="apt-fast list"
alias afs="apt-fast search"
alias afshow="apt-fast show"

#==== APT-REPO
addrep(){
    sudo add-apt-repository "ppa:$1" -y
    sudo apt-fast update
}

#==== EDIT
alias svi="sudo vi"

# Home, user, shell
#---------------------------------------
#==== dirs
alias mdp="mkdir -p"
alias cdb="cd -"
#==== mkdir & cd into it
function mcd(){ mkdir -p "$1" && cd "$1" }
#==== cd & list contents
function cdl(){cd "$1" && ls -1FSshX --file-type}

#==== list stuff
alias ldot="ls -d --group-directories-first .*"
alias lk="ls -1FSshX --file-type"
alias l="ls --group-directories-first -X"


# misc
#---------------------------------------
#==== GIT
alias gc="git clone --depth=1"
function gcd(){
    REPO_URL=$1
    git clone --depth=1 $REPO_URL
    cdl "$(basename $1 .git)"
}
function gcto(){
    REPO=$1
    REPO_DEST=$2
    git clone --depth=1 "https://github.com/$REPO" $REPO_DEST
}


#==== PIP
alias pi="pip install -U"


#=============================================================================#
#                                GCC                                          #
#=============================================================================#

addrep 'ubuntu-toolchain-r/test' # Don't need repo if on 18.04
gcc-7 g++-7 gcc-8 g++-8 --install-suggests
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 80 --slave /usr/bin/g++ g++ /usr/bin/g++-7
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
update-alternatives --set gcc /usr/bin/gcc-8
$afug



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#        _                            __  _   _   _
#       | |                          / / | | (_) | |
#     __| |   ___   _ __    ___     / /  | |  _  | |__    ___
#    / _` |  / _ \ | '_ \  / __|   / /   | | | | | '_ \  / __|
#   | (_| | |  __/ | |_) | \__ \  / /    | | | | | |_) | \__ \
#    \__,_|  \___| | .__/  |___/ /_/     |_| |_| |_.__/  |___/
#                  | |
#                  |_|
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#==============================================================================
#                             Common Dependencies                             #
#==============================================================================

wget
curl
git-core
apt-transport-https
autoconf
automake
build-essential
cmake
docbook2x
dvipng
extra-cmake-modules
gfortran
graphviz
imagemagick
libarchive-dev
libatomic1
libbz2-dev
libcurl4-openssl-dev
libncurses5-dev
libqt5core5a
libqt5dbus5
libqt5svg5-dev
libqt5widgets5
libqt5x11extras5-dev
libreadline-dev
librsvg2-bin
libre2-dev
libsqlite3-dev
libssl-dev
libxcb-keysyms1-dev
llvm
m4
make
p7zip-full
p7zip-rar
perl
pkg-config
python-sphinx
qt5-default
qt5-qmake
qttools5-dev-tools
redis-server
redis-tools
software-properties-common
texlive-xetex
tk-dev
xclip
xz-utils
zlib1g-dev

# Printer utils
# ===============
printer-driver-brlaser


# Fonts
# ===============
fonts-stix # math symbols
texlive-fonts-recommended
texlive-latex-recommended
fonts-umeplus
fonts-hanazono
fonts-mplus
fonts-mikachan

###################################################################################################################################################################################################

# INCLUDE NOTES ON SETTING UP FONTS
################################################################################################################################################################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#               ___    _ __   __   __
#              / _ \  | '_ \  \ \ / /
#             |  __/  | | | |  \ V /
#              \___|  |_| |_|   \_/
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# oh-my-zsh
# ===============
zsh
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)";
#==== Plugins:
#colored-man-pages # available default
gcto paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open
gcto jocelynmallon/zshmarks.git $ZSH_CUSTOM/plugins/zshmarks
gcto zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions


# pyenv
# ===============
curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash;
echo 'export PATH="/home/evan/.pyenv/bin:$PATH"' >> ~/.zshrc
echo 'eval "$(pyenv init -)"' >> ~/.zshrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.zshrc


# Node, NPM, n
# =================
curl -L https://git.io/n-install | N_PREFIX=~/.n bash -s -- -y




###############################################################################
#                                                                             #
#                                                                             #
#                                                                             #
#    ███████╗ ██████╗ ███████╗████████╗██╗    ██╗ █████╗ ██████╗ ███████╗     #
#    ██╔════╝██╔═══██╗██╔════╝╚══██╔══╝██║    ██║██╔══██╗██╔══██╗██╔════╝     #
#    ███████╗██║   ██║█████╗     ██║   ██║ █╗ ██║███████║██████╔╝█████╗       #
#    ╚════██║██║   ██║██╔══╝     ██║   ██║███╗██║██╔══██║██╔══██╗██╔══╝       #
#    ███████║╚██████╔╝██║        ██║   ╚███╔███╔╝██║  ██║██║  ██║███████╗     #
#    ╚══════╝ ╚═════╝ ╚═╝        ╚═╝    ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝     #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                         __     _             __
#    ___    _____   _____  ___    ____   / /_   (_)  ____ _   / /
#   / _ \  / ___/  / ___/ / _ \  / __ \ / __/  / /  / __ `/  / /
#  /  __/ (__  )  (__  ) /  __/ / / / // /_   / /  / /_/ /  / /
#  \___/ /____/  /____/  \___/ /_/ /_/ \__/  /_/   \__,_/  /_/
#


guake
# pip-packages, ALL
joplin
sublimetext
nativefier
croc
superproductivity
git-extras
fzf
z
zshmarks
shiori
flameshot
ghostwriter
mendeley
git-hoard


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                               _
#                              | |
#                __ _   _ __   | |_
#               / _` | | '_ \  | __|
#              | (_| | | |_) | | |_
#               \__,_| | .__/   \__|
#                      | |
#                      |_|
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

guake
vim
anki
chromium-browser
flameshot
go-for-it
figlet
git-extras
pdfsam  # install from deb; apt outdated

vlc
mpv
keepassxc
gparted
jq # 'sed' for json
deborphan
aria2
deluge
img2pdf
wkhtmltopdf
xfce4-timer-plugin
gedit

htop
tmux
tree
psensor
okular
nomacs
tlp
exfat-utils
flac
lame
x264
alarm-clock-applet
unrar
dictd
dict-gcide
dict-wn

# Try out some time:
clocJ
unar
wmctrl

#------------------------------------------------------------------------------
#                              PPAs/debs/ubuntu rdy
#------------------------------------------------------------------------------


# git
# ===============
addrep git-core/ppa
$afug
# $afi git (in case afug doesnt wokr)

# Super productivity
# ===============
echo "deb https://dl.bintray.com/johannesjo/super-productivity stable super-productivity" | tee -a /etc/apt/sources.list
$afu
superproductivity

# Sublime Text 3
# ===============
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add -;
echo "deb https://download.sublimetext.com/ apt/stable/" | tee /etc/apt/sources.list.d/sublime-text.list;
$afu
sublime-text

# Ghostwriter
# ===============
addrep wereturtle/ppa
ghostwriter

# Mendeley
#================
# DL:
https://www.mendeley.com/repositories/ubuntu/stable/amd64/mendeleydesktop-latest


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#           _ __    _ __    _ __ ___
#          | '_ \  | '_ \  | '_ ` _ \
#          | | | | | |_) | | | | | | |
#          |_| |_| | .__/  |_| |_| |_|
#                  | |
#                  |_|
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#==== nativefier
sudo npm i -g nativefier

#==== gitbook
sudo npm i -g gitbook-cli

#==== tldr pages
#sudo npm install -g tldr

# Nativefier
#--------------------------------------------
#pnpm install nativefier -g
#===== Google
nativefier "https://mail.google.com" -n gmail -a x64 -p linux --honest -m --single-instance --tray --counter
nativefier "https://drive.google.com" -n google-drive -a x64 -p linux --honest -m --single-instance --internal-url 3 -i /home/evan/Chest/Resources/Icons/google-drive.png
nativefier "https://keep.google.com" -n google-keep -a x64 -p linux --honest -m --single-instance --tray -i /home/evan/Chest/Resources/Icons/google_keep_icon.png
nativefier "https://calendar.google.com" -n google-calendar -a x64 -p linux --honest -m --single-instance --tray -i /home/evan/Chest/Resources/Icons/google-calendar.png

#====== Blog/read
nativefier "https://deepmind.com/blog/" -n deepmind-blog -a x64 -p linux --honest -m --single-instance -i /home/evan/Chest/Resources/Icons/deepmind_logo_swirl_blue.png
nativefier "https://blog.openai.com/" -n openai-blog -a x64 -p linux --honest -m --single-instance -i /home/evan/Chest/Resources/Icons/openai.png
nativefier "https://ai.google/research/pubs/" -n google-ai -a x64 -p linux --honest -m --single-instance -i /home/evan/Chest/Resources/Icons/googleAi-icon

#====== Job stuff
nativefier "https://www.simplyhired.com/" -n simply-hired -a x64 -p linux --honest -m -i /home/evan/Chest/Resources/Icons/SimplyHired-icon.png
nativefier "https://www.linkedin.com/uas/login" -p linux -a x64 -n linkedin --honest -m --single-instance -i /home/evan/Chest/Resources/Icons/linkedin.png
nativefier "https://airtable.com/" -n airtable -a x64 -p linux --honest -m --single-instance -i /home/evan/Chest/Resources/Icons/airtable.png

#====== Other
nativefier "https://www.hackerrank.com/dashboard" -n hacker-rank -a x64 -p linux --honest -m -i /home/evan/Chest/Resources/Icons/HackerRank_logo.png

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                _     _
#               | |   | |
#         ___   | |_  | |__    ___   _ __
#        / _ \  | __| | '_ \  / _ \ | '__|
#       | (_) | | |_  | | | ||  __/ | |
#        \___/   \__| |_| |_| \___| |_|
#
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#------------------------------------------------------------------------------
#                                Installer & simple
#------------------------------------------------------------------------------

#==== croc
curl https://getcroc.schollz.com | bash

#==== Joplin
wget -O - https://raw.githubusercontent.com/laurent22/joplin/master/Joplin_install_and_update.sh | bash

#==== Z jump
mkdir -p ~/.Z_jump
wget -O ~/.Z_jump/z.sh https://raw.githubusercontent.com/rupa/z/master/z.sh && echo ". $HOME/Z_jump/z.sh" >> ~/.zshrc

#==== fzf
gcto junegunn/fzf.git ~/.fzf

#==== cheat sheet
#https://github.com/chubin/cheat.sh
curl https://cht.sh/:cht.sh > ~/.local/bin/cht.sh
chmod +x ~/.local/bin/cht.sh

#==== borg
wget https://github.com/ok-borg/borg/releases/download/v0.0.3/borg_linux_amd64 -O /usr/local/bin/borg
chmod 755 /usr/local/bin/borg


#------------------------------------------------------------------------------
#                                OTHER
#------------------------------------------------------------------------------


# MISC
#--------------------------------------------
zeal

# Shiori
#========
# Download latest binary from: https://github.com/RadhiFadlillah/shiori/releases
# mv binary to path folder:
mv shiori_linux_amd64 ~/.local/bin/shiori


# Reminiscence
#=============
# need ---> venv (pyenv), wkhtmltopdf, redis-server (optional)
mkdir reminiscence
cd reminiscence
pyenv virtualenv 3.7.0 reminiscence
pyenv local reminiscence
git clone --depth=1 https://github.com/kanishka-linux/reminiscence.git
cd reminiscence
pip install -r requirements.txt
mkdir logs archive tmp
python manage.py generatesecretkey
python manage.py nltkdownload
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver 127.0.0.1:8000
# open 127.0.0.1:8000 using any browser, login and start adding links

#**Note:** replace localhost address with local ip address of your server
#          to access web-interface from anywhere on the local network

# grab-site
#=============
sudo apt update
sudo apt install --no-install-recommends git build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev libxml2-dev libxslt1-dev libre2-dev pkg-config
pip install --process-dependency-links --no-binary --upgrade git+https://github.com/ludios/grab-site

# Chromium extensions
#====================
"Arc Dark"
"Archiveror"
"arXiv bib overlay"
"Awesome Stars"
"Better Bookmark"
"Bookmarks clean up"
"Close Tabs to the Left"
"Copy All Urls"
"Dark Reader"
"Gibbon Tabs"
"GitHub Downloader"
"Github Original Streak"
"HTTPS Everywhere"
"Joplin Web Clipper"
"Like on GitHub"
"Lovely forks"
"Math Anywhere"
"Old Reddit Redirect"
"Privacy Badger"
"py3redirect"
"Redirectify"
"Refined GitHub"
"rikaikun"
"Sight"
"Tab Ahead"
"Tab Save"
"uBlock Origin Extra"
"uBlock Origin"
"View Image"
"WARCreate"
"Wide Github"
"WikiMapper"
"Wikipedia Reading Lists"
"xBrowserSync"

# Openssh (local) server
#=======================
sudo apt install openssh-server;
sudo service ssh status;
sudo vi /etc/ssh/sshd_config; # change port from 22 to 2501
sudo systemctl restart sshd.service;
hostname -I; # get ip
# copy ssh-id from non-server machine
ssh-copy-id evan@remotehost;
sudo vi /etc/ssh/sshd_config; # disable password auth
sudo systemctl restart sshd.service;



#
#
#     _____   _____    _    _
#    / ____| |  __ \  | |  | |
#   | |  __  | |__) | | |  | |
#   | | |_ | |  ___/  | |  | |
#   | |__| | | |      | |__| |
#    \_____| |_|       \____/




#        _                _      _
#       | |              | |    | |
#     __| |   ___   ___  | | __ | |_    ___    _ __
#    / _` |  / _ \ / __| | |/ / | __|  / _ \  | '_ \
#   | (_| | |  __/ \__ \ |   <  | |_  | (_) | | |_) |
#    \__,_|  \___| |___/ |_|\_\  \__|  \___/  | .__/
#                                             | |
#                                             |_|


# Sublime themes
#======================
#  # Dark
#  #--------
#  ** piodine **
#  ** oceanic next**
#  easyballs
#  gooey
#  # Medium & desat
#  #---------------
#  mutedrainbow_sky
#  late_night
#  koralgreen
#  seafoam-pastel-dark # plaintext better
#  nouba # plaintext
#  # Light
#  #--------
#  Github-v2  ***
#  snappy-light
#  softly
#  lazy
#  spring

# Sublime packages
#=======================

#==============================================================================
#                    _    _    _
#                   | |  | |  (_)
#         ___   ___ | |_ | |_  _  _ __    __ _  ___
#        / __| / _ \| __|| __|| || '_ \  / _` |/ __|
#        \__ \|  __/| |_ | |_ | || | | || (_| |\__ \
#        |___/ \___| \__| \__||_||_| |_| \__, ||___/
#                                         __/ |
#                                        |___/
#
#==============================================================================

# Fix slow-start debian bug
# =========================

# apt-daily
# ---------
sudo systemctl edit apt-daily.timer
# Paste into edit:
# apt-daily timer configuration override
[Timer]
OnBootSec=15min
OnUnitActiveSec=1d
AccuracySec=1h
RandomizedDelaySec=30min

# Network manager
# ---------------
sudo systemctl disable NetworkManager-wait-online.service

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Keyboard
# ========
#==== Volume
amixer set Master 5%-  # Alt+-
amixer set Master 5%+  # Alt+=
#==== misc/app
flameshot gui    # Print
echo 'keycode 118 = ' > ~/.Xmodmap # disable insert key


# Thunar custom actions:
#-------------------------
#==== Replace spaces, format name to all lower
for file in %N; do mv "$file" "$(echo "$file" | tr -s ' ' | tr ' A-Z' '-a-z' | tr -s '-' | tr -c '[:alnum:][:cntrl:].' '-')"; done
#==== Open directory in sublime
/usr/bin/subl .
#==== Copies full pathname for a file or folder  to clipboard
echo -n %f | xclip -selection "clipboard"
#==== Touch .txt
/usr/bin/touch notes.txt
#==== Open guake here
guake -n '%d%f ' -r "%f " --show -e "cd '%f' && ls -1FSshX --file-type"


#==== Japanese IME (mozc)
# mozc
#If you have Xubuntu 16.04 installed and want to be able to type Japanese, try the following steps:
#1. Go to "Settings" and then "Language Support": click the button "install/remove languages" and choose Japanese.
#2. Change the "Keyboard input method system" (same menu) to "fcitx". "Close" window.
#3. Go to "Keyboard", choose the "Layout" tab, and "Add" Japanese. Make sure "use system default" is untoggled. "Close" window (I'm not sure this step is necessary, but I did it anyway)
#4. Go to "Settings" and then "Fcitx Configuration", under the tab "Input method" click "+". Untoggle "only show current language" and choose "Mozc Japanese" from the list. (I had to scroll throught the entire list to find this. It doesn't start with "Keyboard - " like the other options.)
#5. Go to the tab "Global config" in the same window and look which keys trigger the Japanese input method. The default on my computer is CTRL+Space. Alternatively, a keyboard icon should be visible in the panel where you can select "Input method" - "Mozc"
#I admit to restarting my computer a few times inbetween some of the steps. I'm not sure if it is necessary.
#I don't remember ever installing "Mozc" and "Fcitx", I think they came with the system/Japanese language support.

# in Language Support > regional formats > display numbers usual format for japanese
# orage clock format: %x %R
# https://www.linuxquestions.org/questions/slackware-14/xfce-clock-custom-formatting-codes-753433/
# previous: %d %b, %H:%M







#=============================================================================#
#                                                                             #
#        .d8888b.      8888888b.     888     888                              #
#       d88P  Y88b     888   Y88b    888     888                              #
#       888    888     888    888    888     888                              #
#       888            888   d88P    888     888                              #
#       888  88888     8888888P"     888     888                              #
#       888    888     888           888     888                              #
#       Y88b  d88P     888           Y88b. .d88P                              #
#        "Y8888P88     888            "Y88888P"                               #
#                                                                             #
#        .d8888b.     8888888888   88888888888   888     888    8888888b.     #
#       d88P  Y88b    888              888       888     888    888   Y88b    #
#       Y88b.         888              888       888     888    888    888    #
#        "Y888b.      8888888          888       888     888    888   d88P    #
#           "Y88b.    888              888       888     888    8888888P"     #
#             "888    888              888       888     888    888           #
#       Y88b  d88P    888              888       Y88b. .d88P    888           #
#        "Y8888P"     8888888888       888        "Y88888P"     888           #
#                                                                             #
#=============================================================================#


#=============================================================================#
#                     ___   _   _   ___      _                                #
#                    / __| | | | | |   \    /_\                               #
#                   | (__  | |_| | | |) |  / _ \                              #
#                    \___|  \___/  |___/  /_/ \_\                             #
#               ======================================                        #

#------------------------------------------------------------------------------
#   __ ___       __  ___
#  (_   |   /\  |__)  |
#  __)  |  /--\ | \   |

#==== Install from network deb (downloaded)
sudo dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
#sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub

sudo apt update
sudo apt install cuda-10-0


# "Recommended Packages"
#libnvidia-compute-410:i386 libnvidia-decode-410:i386 libnvidia-encode-410:i386 libnvidia-ifr1-410:i386 libnvidia-fbc1-410:i386 libnvidia-gl-410:i386


#==== Update path
# Now, add the following lines to your shell config (.zshrc, etc)
export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

#==== Reboot to finish installation
reboot

#==== Verify installation
nvcc -V
nvidia-smi

#==== If nouveau is an issue:
# Create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following contents:
blacklist nouveau
options nouveau modeset=0

# Regenerate the kernel initramfs:
sudo update-initramfs -u

#   __       __
#  |_  |\ | |  \
#  |__ | \| |__/
#------------------------------------------------------------------------------





#=============================================================================#
#                               ___    _  _   _  _                            #
#                   __   _  _  |   \  | \| | | \| |                           #
#                  / _| | || | | |) | | .` | | .` |                           #
#                  \__|  \_,_| |___/  |_|\_| |_|\_|                           #
#               ======================================                        #

#------------------------------------------------------------------------------
#   __ ___       __  ___
#  (_   |   /\  |__)  |
#  __)  |  /--\ | \   |

#==== cuDNN
# tar file method:
tar -xzvf cudnn-10.0-linux-x64-v7.3.1.20.tgz # whatever ver you got
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

#==== Verify cuDNN installation
#  For cuDNN 7.3, you should see CUDNN_MAJOR 7, CUDNN_MINOR 3
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2

#   __       __
#  |_  |\ | |  \
#  |__ | \| |__/
#------------------------------------------------------------------------------





#=============================================================================#
#           _____                                 ___   _____                 #
#          |_   _|  ___   _ _    ___  ___   _ _  | _ \ |_   _|                #
#            | |   / -_) | ' \  (_-< / _ \ | '_| |   /   | |                  #
#            |_|   \___| |_||_| /__/ \___/ |_|   |_|_\   |_|                  #
#               ======================================                        #


#------------------------------------------------------------------------------
#   __ ___       __  ___
#  (_   |   /\  |__)  |
#  __)  |  /--\ | \   |

#==== TensorRT
sudo dpkg -i nv-tensorrt-repo-ubuntu1804-cuda10.0-trt5.0.0.10-rc-20180906_1-1_amd64.deb
sudo apt update
sudo apt install tensorrt
sudo apt install uff-converter-tf

#==== Verify installation
dpkg -l | grep TensorRT


#   __       __
#  |_  |\ | |  \
#  |__ | \| |__/
#------------------------------------------------------------------------------






#=============================================================================#
#                      _  _    ___    ___   _                                 #
#                     | \| |  / __|  / __| | |                                #
#                     | .` | | (__  | (__  | |__                              #
#                     |_|\_|  \___|  \___| |____|                             #
#               ======================================                        #






#=============================================================================#
#                                                                             #
#     88                        88  88           88                  ad88     #
#     88                        ""  88           88        ,d       d8"       #
#     88                            88           88        88       88        #
#     88,dPPYba,   88       88  88  88   ,adPPYb,88      MM88MMM  MM88MMM     #
#     88P'    "8a  88       88  88  88  a8"    `Y88        88       88        #
#     88       d8  88       88  88  88  8b       88        88       88        #
#     88b,   ,a8"  "8a,   ,a88  88  88  "8a,   ,d88        88,      88        #
#     8Y"Ybbd8"'    `"YbbdP'Y8  88  88   `"8bbdP"Y8        "Y888    88        #
#                                                                             #
#=============================================================================#


#                ___   _____   ___   ___     _                                #
#               / __| |_   _| | __| | _ \   / |                               #
#               \__ \   | |   | _|  |  _/   | |                               #
#               |___/   |_|   |___| |_|     |_|                               #
#            =====================================                            #
#             ---> Install bazel

#==== Install the JDK:
sudo apt install openjdk-8-jdk

#==== Add Bazel distribution URI as a package source:
echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -

#==== Install Bazel
sudo apt update && sudo apt install bazel


#  .bazelrc:
#==== startup args come before commands like "build"
# Now outputs to /tmp/bazel INSTEAD of ~/.cache
startup --output_user_root=/tmp/bazel

