# -*- coding: utf-8 -*-
"""
The MIT License (MIT): Copyright (c) 2016 maguowei
ACKNOWLEDGEMENT: Source script from github.com/maguowei
"""

import sys
from io import BytesIO
from collections import OrderedDict
import click
from github3 import GitHub
from github3.exceptions import NotFoundError
import code

"""
desc = '''# Awesome Stars [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d730\
5f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

> A curated list of my GitHub stars!  Generated by [starred](https://github.com/maguowei/starred)


## Contents
'''
"""

desc = '''# :stars: Star Map

A list of my starred repos.


## Contents
'''

license_ = '''
## Acknowledgement
*Original generator script from [starred](https://github.com/maguowei/starred)*
'''

html_escape_table = {
    ">": "&gt;",
    "<": "&lt;",
}

USER = 'evdcush'

def html_escape(text):
    """Produce entities within text."""
    return "".join(html_escape_table.get(c, c) for c in text)


@click.command()
@click.option('--username', envvar='USER', help='GitHub username')
@click.option('--token', envvar='GITHUB_TOKEN', help='GitHub token')
@click.option('--sort',  is_flag=True, help='sort by language')
@click.option('--repository', default='', help='repository name')
@click.option('--message', default='update stars', help='commit message')
@click.version_option(version='2.0.3', prog_name='starred')
def starred():
    """GitHub starred

    creating your own Awesome List used GitHub stars!

    example:
        starred --username maguowei --sort > README.md
    """
    if repository:
        if not token:
            click.secho('Error: create repository need set --token', fg='red')
            return
        file = BytesIO()
        sys.stdout = file
    else:
        file = None

    gh = GitHub(token=token)
    stars = gh.starred_by(username)
    click.echo(desc)
    repo_dict = {}

    for s in stars:
        language = s.language or 'Others'
        description = html_escape(s.description).replace('\n', '') if s.description else ''
        if language not in repo_dict:
            repo_dict[language] = []
        repo_dict[language].append([s.name, s.html_url, description.strip()])

    if sort:
        repo_dict = OrderedDict(sorted(repo_dict.items(), key=lambda l: l[0]))

    for language in repo_dict.keys():
        data = u'  - [{}](#{})'.format(language, '-'.join(language.lower().split()))
        click.echo(data)
    click.echo('')

    for language in repo_dict:
        click.echo('## {} \n'.format(language.replace('#', '# #')))
        for repo in repo_dict[language]:
            data = u'- [{}]({}) - {}'.format(*repo)
            click.echo(data)
        click.echo('')

    click.echo(license_.format(username=username))

    if file:
        try:
            rep = gh.repository(username, repository)
            readme = rep.readme()
            readme.update(message, file.getvalue())
        except NotFoundError:
            rep = gh.create_repository(repository, 'A curated list of my GitHub stars!')
            rep.create_file('README.md', 'starred initial commit', file.getvalue())
        click.launch(rep.html_url)



'''
# <GitHubIterator [-1, /users/evdcush/starred]>
stars = gh.starred_by(USER)


S = list(stars)
[ ...,
<ShortRepository [PharkMillups/beautiful-docs]>,
 <ShortRepository [gollum/gollum]>,
 <ShortRepository [mrvautin/githubdocs]>,
 <ShortRepository [MStadlmeier/drivesync]>,
 <ShortRepository [mickael-kerjean/nuage]>,
 <ShortRepository [zhangqianhui/AdversarialNetsPapers]>,
 <ShortRepository [tscohen/GrouPy]>,
 <ShortRepository [davechurchill/commandcenter]>,
 <ShortRepository [wekan/wekan]>,
 <ShortRepository [eriklindernoren/ML-From-Scratch]>,
 <ShortRepository [deepmind/pysc2]>,
 <ShortRepository [bwapi/bwapi]>,
 <ShortRepository [TorchCraft/TorchCraft]>,
 <ShortRepository [pfnet-research/chainer-chemistry]>,
 <ShortRepository [pfnet-research/chainer-graph-cnn]>,
 <ShortRepository [google/tangent]>,
 <ShortRepository [wiseodd/generative-models]>,
 <ShortRepository [kristofbc/explainable-ml]>,
 <ShortRepository [pfnet-research/chainer-gan-lib]>,
 <ShortRepository [cbfinn/maml]>,
 <ShortRepository [kjw0612/awesome-rnn]>,
 <ShortRepository [chainer/chainer]>]


#<ShortRepository [chainer/chainer]>
chainer_star = S[-1]

# Print attr
pprint.pprint(chainer_star.as_dict()):

{'archive_url': 'https://api.github.com/repos/chainer/chainer/{archive_format}{/ref}',
 'archived': False,
 'assignees_url': 'https://api.github.com/repos/chainer/chainer/assignees{/user}',
 'blobs_url': 'https://api.github.com/repos/chainer/chainer/git/blobs{/sha}',
 'branches_url': 'https://api.github.com/repos/chainer/chainer/branches{/branch}',
 'clone_url': 'https://github.com/chainer/chainer.git',
 'collaborators_url': 'https://api.github.com/repos/chainer/chainer/collaborators{/collaborator}',
 'comments_url': 'https://api.github.com/repos/chainer/chainer/comments{/number}',
 'commits_url': 'https://api.github.com/repos/chainer/chainer/commits{/sha}',
 'compare_url': 'https://api.github.com/repos/chainer/chainer/compare/{base}...{head}',
 'contents_url': 'https://api.github.com/repos/chainer/chainer/contents/{+path}',
 'contributors_url': 'https://api.github.com/repos/chainer/chainer/contributors',
 'created_at': '2015-06-05T05:50:37Z',
 'default_branch': 'master',
 'deployments_url': 'https://api.github.com/repos/chainer/chainer/deployments',

 'description': 'A flexible framework of neural networks for deep learning',

 'downloads_url': 'https://api.github.com/repos/chainer/chainer/downloads',
 'events_url': 'https://api.github.com/repos/chainer/chainer/events',
 'fork': False,
 'forks': 1082,
 'forks_count': 1082,
 'forks_url': 'https://api.github.com/repos/chainer/chainer/forks',

 'full_name': 'chainer/chainer',

 'git_commits_url': 'https://api.github.com/repos/chainer/chainer/git/commits{/sha}',
 'git_refs_url': 'https://api.github.com/repos/chainer/chainer/git/refs{/sha}',
 'git_tags_url': 'https://api.github.com/repos/chainer/chainer/git/tags{/sha}',

 'git_url': 'git://github.com/chainer/chainer.git',

 'has_downloads': True,
 'has_issues': True,
 'has_pages': False,
 'has_projects': True,
 'has_wiki': True,
 'homepage': 'https://chainer.org',
 'hooks_url': 'https://api.github.com/repos/chainer/chainer/hooks',
 'html_url': 'https://github.com/chainer/chainer',
 'id': 36914478,
 'issue_comment_url': 'https://api.github.com/repos/chainer/chainer/issues/comments{/number}',
 'issue_events_url': 'https://api.github.com/repos/chainer/chainer/issues/events{/number}',
 'issues_url': 'https://api.github.com/repos/chainer/chainer/issues{/number}',
 'keys_url': 'https://api.github.com/repos/chainer/chainer/keys{/key_id}',
 'labels_url': 'https://api.github.com/repos/chainer/chainer/labels{/name}',

 'language': 'Python',

 'languages_url': 'https://api.github.com/repos/chainer/chainer/languages',
 'license': {'key': 'mit',
             'name': 'MIT License',
             'node_id': 'MDc6TGljZW5zZTEz',
             'spdx_id': 'MIT',
             'url': 'https://api.github.com/licenses/mit'},
 'merges_url': 'https://api.github.com/repos/chainer/chainer/merges',
 'milestones_url': 'https://api.github.com/repos/chainer/chainer/milestones{/number}',
 'mirror_url': None,
 'name': 'chainer',
 'node_id': 'MDEwOlJlcG9zaXRvcnkzNjkxNDQ3OA==',
 'notifications_url': 'https://api.github.com/repos/chainer/chainer/notifications{?since,all,participating}',
 'open_issues': 191,
 'open_issues_count': 191,
 'owner': {'avatar_url': 'https://avatars3.githubusercontent.com/u/23183003?v=4',
           'events_url': 'https://api.github.com/users/chainer/events{/privacy}',
           'followers_url': 'https://api.github.com/users/chainer/followers',
           'following_url': 'https://api.github.com/users/chainer/following{/other_user}',
           'gists_url': 'https://api.github.com/users/chainer/gists{/gist_id}',
           'gravatar_id': '',
           'html_url': 'https://github.com/chainer',
           'id': 23183003,
           'login': 'chainer',
           'node_id': 'MDEyOk9yZ2FuaXphdGlvbjIzMTgzMDAz',
           'organizations_url': 'https://api.github.com/users/chainer/orgs',
           'received_events_url': 'https://api.github.com/users/chainer/received_events',
           'repos_url': 'https://api.github.com/users/chainer/repos',
           'site_admin': False,
           'starred_url': 'https://api.github.com/users/chainer/starred{/owner}{/repo}',
           'subscriptions_url': 'https://api.github.com/users/chainer/subscriptions',
           'type': 'Organization',
           'url': 'https://api.github.com/users/chainer'},
 'private': False,
 'pulls_url': 'https://api.github.com/repos/chainer/chainer/pulls{/number}',
 'pushed_at': '2018-09-05T11:31:03Z',
 'releases_url': 'https://api.github.com/repos/chainer/chainer/releases{/id}',
 'size': 28545,
 'ssh_url': 'git@github.com:chainer/chainer.git',
 'stargazers_count': 4086,
 'stargazers_url': 'https://api.github.com/repos/chainer/chainer/stargazers',
 'statuses_url': 'https://api.github.com/repos/chainer/chainer/statuses/{sha}',
 'subscribers_url': 'https://api.github.com/repos/chainer/chainer/subscribers',
 'subscription_url': 'https://api.github.com/repos/chainer/chainer/subscription',
 'svn_url': 'https://github.com/chainer/chainer',
 'tags_url': 'https://api.github.com/repos/chainer/chainer/tags',
 'teams_url': 'https://api.github.com/repos/chainer/chainer/teams',
 'trees_url': 'https://api.github.com/repos/chainer/chainer/git/trees{/sha}',
 'updated_at': '2018-09-05T09:11:28Z',
 'url': 'https://api.github.com/repos/chainer/chainer',
 'watchers': 4086,
 'watchers_count': 4086}

'''


'''
@click.command()
@click.option('--username', envvar='USER', help='GitHub username')
@click.option('--token', envvar='GITHUB_TOKEN', help='GitHub token')
@click.option('--sort',  is_flag=True, help='sort by language')
@click.option('--repository', default='', help='repository name')
@click.option('--message', default='update stars', help='commit message')
@click.version_option(version='2.0.3', prog_name='starred')
def starred():
    """GitHub starred
    """
    file = None

    gh = GitHub(token=token)
    #gh = GitHub()
    stars = gh.starred_by(USER)
    click.echo(desc)
    #print(desc)
    #code.interact(local=dict(globals(), **locals())) # DEBUGGING-use
    repo_dict = {}

    for s in stars:
        language = s.language or 'Others'
        description = html_escape(s.description).replace('\n', '') if s.description else ''
        if language not in repo_dict:
            repo_dict[language] = []
        repo_dict[language].append([s.name, s.html_url, description.strip()])

    if sort:
        repo_dict = OrderedDict(sorted(repo_dict.items(), key=lambda l: l[0]))

    for language in repo_dict.keys():
        data = u'  - [{}](#{})'.format(language, '-'.join(language.lower().split()))
        click.echo(data)
    click.echo('')

    for language in repo_dict:
        click.echo('## {} \n'.format(language.replace('#', '# #')))
        for repo in repo_dict[language]:
            data = u'- [{}]({}) - {}'.format(*repo)
            click.echo(data)
        click.echo('')

    click.echo(license_.format(username=username))

    if file:
        try:
            rep = gh.repository(username, repository)
            readme = rep.readme()
            readme.update(message, file.getvalue())
        except NotFoundError:
            rep = gh.create_repository(repository, 'A curated list of my GitHub stars!')
            rep.create_file('README.md', 'starred initial commit', file.getvalue())
        click.launch(rep.html_url)


'''
poo = starred()

code.interact(local=dict(globals(), **locals())) # DEBUGGING-use
