#!/bin/bash

############### NOT INTENDED FOR OTHER USERS. Just me! ########################
#==============================================================================
#                    ## PACKAGE MANAGER APT ##
#==============================================================================

SETUP APT-SELECT BEFORE DOING ANYTHING --> GET FASTEST MIRRORS
SETUP APT-FAST BEFORE DOING ANYTHING
MIRRORS=( 'http://mirror.picosecond.org/ubuntu/', 'http://ftp://mirror.picosecond.org/ubuntu/', 'http://rsync://mirror.picosecond.org/ubuntu/', 'http://ftp://mirror.enzu.com/ubuntu/', 'http://rsync://mirror.enzu.com/ubuntu/', 'http://mirror.enzu.com/ubuntu/', 'http://la-mirrors.evowise.com/ubuntu/', 'http://rsync://mirrors.ocf.berkeley.edu/ubuntu/', 'http://ftp://mirrors.ocf.berkeley.edu/ubuntu/', 'http://mirrors.ocf.berkeley.edu/ubuntu/', 'http://mirror.math.ucdavis.edu/ubuntu/' )





# APT PACKAGES NEW
#=========================
apt-fast
wmctrl # see info about windows manager
#geeqie # maybe not worth it?
unar
go-for-it

#=== possibly PPA or deb:
zoom
superproductivity
slack
discord
mendeley
boostnote
sudo add-apt-repository ppa:zeal-developers/ppa

# Github
#=========================
bashmarks # git clone git://github.com/huyng/bashmarks.git
# https://github.com/rsms/inter/releases # interui fonts
# LINE? # https://github.com/carpedm20/LINE


# sublime
sublimeautodocstring

# put nativefier stuff in ~/.local/share/
nativefier "https://blog.openai.com/" -n openai-blog -a x64 -p linux -i ./icons/openai_logo.png
nativefier "https://github.com/evdcush" -n github -a x64 -p linux -i github_icon.png
nativefier "https://deepmind.com/blog/" -n deepmind-blog -a x64 -p linux -i ./icons/deepmind_swirl.png
nativefier "https://medium.com/topic/artificial-intelligence" -n medium-blog -a x64 -p linux -i icons/medium_icon.png
nativefier "https://keep.google.com" -n google-keep -a x64 -p linux -i icons/google-keep-icon.png
nativefier "https://drive.google.com" -n google-drive -a x64 -p linux -i google-drive_ico.png

#------------------------------------------------------------------------------
#               ## Remove unwanted packages and bloat ##
#------------------------------------------------------------------------------
#==== Remove Bloat
apt remove --purge -y firefox
apt remove --purge -y transmission-common
apt remove --purge -y pidgin
apt remove --purge -y pidgin-data pidgin-otr
apt remove --purge -y parole
apt remove --purge -y xfburn
apt remove --purge -y evince
apt remove --purge -y libreoffice-common
apt remove --purge -y mousepad


#==== Update, Upgrade
sudo apt update && sudo apt upgrade -y && sudo update-ca-certificates -f && sudo apt autoremove
# apt full-upgrade # for drivers, but may install ubuntu-sourced nvidia
apt autoremove -y

#==== Apt-fast
sudo add-apt-repository ppa:apt-fast/stable
sudo apt update
sudo apt -y install apt-fast



#==== update GCC/G++
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt update
sudo apt full-upgrade -y
sudo apt install gcc-7 g++-7 gcc-8 g++-8 --install-suggests
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100 --slave /usr/bin/g++ g++ /usr/bin/g++-7
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100 --slave /usr/bin/g++ g++ /usr/bin/g++-7
#sudo update-alternatives --config gcc # to select which gcc you want
sudo apt update


#==== INSTALL
# Utils/Dependencies/Libraries
#sudo apt install -y curl apt-transport-https cmake make git-core autoconf automake build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget llvm libncurses5-dev xz-utils tk-dev
apt install -y curl
apt install -y apt-transport-https
apt install -y cmake
apt install -y make
apt install -y git-core
apt install -y autoconf
apt install -y automake
apt install -y build-essential
apt install -y libssl-dev
apt install -y zlib1g-dev
apt install -y libbz2-dev
apt install -y libreadline-dev
apt install -y libsqlite3-dev
apt install -y wget
apt install -y llvm
apt install -y libncurses5-dev
apt install -y xz-utils
apt install -y tk-dev
apt install -y libatomic1
apt install -y gfortran
apt install -y perl
apt install -y m4
apt install -y pkg-config
apt install -y software-properties-common
apt install -y p7zip-full
apt install -y p7zip-rar
apt install -y redis-server redis-tools



#

#------------------------------------------------------------------------------
#                     ## LANGUAGE/LIBRARIES ##
#------------------------------------------------------------------------------

# Julia
#=========================
mkdir ~/.julia && cd ~/.julia && \
curl -s https://api.github.com/repos/JuliaLang/julia/releases/latest \
| grep "browser_download_url.*full.tar.gz" \
| cut -d : -f 2,3 \
| tr -d \" \
| wget -qi - #-O - \
7z x *full.tar.gz && 7z x *full.tar && rm -r *full.tar*
echo 'export PATH="$(pwd)/julia:$PATH"' >> ~/.zshrc



# Prolog
#=========================
apt-add-repository ppa:swi-prolog/stable
apt update
apt install -y swi-prolog swi-prolog-doc swi-proloc swi-prolog-odbc swi-prolog-bdb

# extra goodies
#=========================
# https://bitbucket.org/ArneBab/wisp/overview
# https://en.wikipedia.org/wiki/Idris_(programming_language)
# http://www.ring-lang.net/
# https://en.wikipedia.org/wiki/Scala_(programming_language)
# https://en.wikipedia.org/wiki/Go_(programming_language)
# https://haskell.org/platform/download/8.4.3/haskell-platform-8.4.3-unknown-posix--full-x86_64.tar.gz
# https://ftp.gnu.org/gnu/guile/guile-2.2.4.tar.gz
# ftp://gprolog.univ-paris1.fr/pub/gprolog/gprolog-latest.tar.gz

# http://cvs.savannah.gnu.org/viewvc/*checkout*/gneuralnetwork/gneural_network-0.9.1.tar.gz?revision=1.1&root=gneuralnetwork
https://ring.cx/

# Node, NPM, yarn
#=========================
curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
apt install -y nodejs
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
apt update && apt install -y yarn


# Media
sudo apt install -y exfat-utils flac lame x264 unrar ubuntu-restricted-extras
sudo apt remove --purge flashplugin-installer
#apt install -y flac
#apt install -y lame
#apt install -y x264
#apt install -y unrar
#apt install -y ubuntu-restricted-extras

# Checkpoint
sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
#apt upgrade -y
#apt autoremove -y

## APPS ##
sudo apt install -y htop guake vim zsh tmux tree xfce4-timer-plugin anki chromium-browser psensor vlc okular nomacs gparted tlp deluge mpv dict dictd dict-gcide dict-wn retext

# Terminal/CLI
#sudo apt install -y htop guake vim zsh tmux tree
#apt install -y htop
#apt install -y guake
#apt install -y vim
#apt install -y zsh
#apt install -y tmux
#apt install -y tree
#apt install -y xfce4-timer-plugin

# User/GUI
#sudo apt install -y anki chromium-browser psensor vlc okular nomacs gparted tlp deluge mpv
#apt install -y anki
#apt install -y chromium-browser
#apt install -y psensor
#apt install -y vlc
#apt install -y mpv
#apt install -y okular
#apt install -y nomacs
#apt install -y gparted
#apt install -y tlp
#apt install -y deluge
#apt install -y retext


# Dictionary
#apt install -y dict dictd dict-gcide dict-wn
#apt install -y dictd
#apt install -y dict-gcide
#apt install -y dict-wn


#==============================================================================
## HOME DIR ##
#==============================================================================

#==== Make home top-level dirs
#cd
#mkdir Soft Media Projects Work Data
##==== Make subdirs
## Media
#cd ~/Media && mkdir Images Music Videos
#cd Images  && mkdir Aes MiscImg Pictures
#cd
## Documents
#mkdir ~/Documents # Documents is default, but for safety
#cd ~/Documents
#mkdir Books Correspondence Course MiscDocs Official Reading Receipts Writing
#cd Official && mkdir Health Immigration Records && cd ~/Documents
#cd Reading  && mkdir Papers PaperNotes          && cd ~/Documents
#cd Books    && mkdir Textbooks eBooks           && cd ~/Documents
#cd
## Projects
#cd ~/Projects
#mkdir Archived Inactive Interview MiscProj
#cd Interview && mkdir Companies Prep && cd ~/Projects
#cd
## Soft
#cd ~/Soft    && mkdir Installed DevStuff
#cd Installed && mkdir Apps MiddleWare Themes Utils && cd ~/Soft
#cd DevStuff  && mkdir Misc Py Tools && cd ~/Soft
#cd
fonts.google.com/download?family=Sawarabi%20Gothic
#==============================================================================
# Install other
#==============================================================================


alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
#==============================================================================
#                    fonts
#==============================================================================
mkdir ~/.fonts

#------------------------------------------------------------------------------
# From github
#------------------------------------------------------------------------------
#==== Google fonts package:
git clone --depth 1 https://github.com/google/fonts.git ~/.fonts/google-fonts

#==== Adobe source-code-pro
git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git ~/.fonts/adobe-fonts/source-code-pro

#==== Misc



#------------------------------------------------------------------------------
# From github
#------------------------------------------------------------------------------

sudo fc-cache -fv

mkdir -p ~/.fonts/googlefonts && cd ~/.fonts/googlefonts
wget https://github.com/google/fonts/archive/master.zip


cd Soft/Packages && wget https://github.com/google/fonts/archive/master.zip

wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Thin.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Light.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-DemiLight.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Regular.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Medium.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Bold.otf
wget fonts.gstatic.com/ea/notosansjapanese/v6/NotoSansJP-Black.otf
wget fonts.gstatic.com/ea/nikukyu/v1/Nikukyu-Regular.ttf
wget fonts.gstatic.com/ea/nicomoji/v1/NicoMoji-Regular.ttf
wget fonts.gstatic.com/ea/kokoro/v1/Kokoro-Regular.ttf
wget fonts.gstatic.com/ea/hannari/v1/Hannari-Regular.ttf

cd /usr/share/fonts && sudo mkdir googlefonts && sudo unzip -d . ~/Soft/Pkgs/fonts-master.zip && sudo chmod -R --reference=opentype googlefonts
sudo fc-cache -fv

# Newer pip pacakges






#==============================================================================
## INSTALL SOURCE/REPO APPS ##
#==============================================================================

#==== Oh My ZSH
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)";

# Prepare zshrc for user-defined settings
#cp ~/.zshrc ~/.zshrc.bkp
#echo '\n\n\n#==============================================================================' > ~/.zshrc
#echo '#### USER-ADDED ####' > ~/.zshrc
#echo '#==============================================================================\n\n\n' > ~/.zshrc



#==== Sublime Text 3
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -;
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list;
apt update;
apt install -y sublime-text;



#==== Ghostwriter
add-apt-repository ppa:wereturtle/ppa
apt update
apt install -y ghostwriter



#==== z jump around
#git clone https://github.com/rupa/z.git ~/Soft/Installed/Utils/z_jump
#echo '\n#==== z jump around' > ~/.zshrc
#echo '. /home/evan/Soft/Installed/Utils/z_jump/z.sh' > ~/.zshrc



# Aliases:
#alias af="sudo apt-fast"
#alias afu="sudo apt-fast update"
#alias afg="sudo apt-fast update && sudo apt-fast upgrade"
#alias afi="sudo apt-fast install"
#alias affu="sudo apt-fast full-upgrade"
#alias afl="apt-fast list"
#alias afs="apt-fast search"
#alias afshow="apt-fast show"
#alias afr="sudo apt-fast remove"
#alias afrp="sudo apt-fast remove --purge"
#alias afa="sudo apt-fast autoremove"
#alias afc="sudo apt-fast clean"



#==============================================================================
# Copying shit and configs
#==============================================================================
echo 'keycode 118 =' > .Xmodmap # disable insert key


#==== Themes/Appearance
## Note: set themes manually in...
# - Appearance
#   - /Style/'Arc-Grey-Dark'
#   - /Icons/'Paper'
# - Window Manager
#   - /Style/'Arc-Grey-Dark'
##

# Arc-grey theme
cd ~/Soft/Installed/Themes/
# archived (but the normal arc theme is WAY better)
#git clone https://github.com/eti0/arc-grey-theme --depth 1 && cd arc-grey-theme
./autogen.sh --prefix=/usr
make install
cd

# Paper icons
add-apt-repository -u ppa:snwh/ppa
apt update
apt install paper-icon-theme








#==============================================================================
# Setting up dev env
#==============================================================================

#------------------------------------------------------------------------------
# Python
#------------------------------------------------------------------------------

#==== Pyenv
## Note: python versions installed
# - 3.6.6 is default py version for env, (last 3.6.* release)
# - 3.7.0 is latest py ver, but not default since not supported by all my packages
# - miniconda-latest is py2, entirely for managing MayaVi
##

# Curl/install pyenv from source, update zshrc
curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash;
#echo '\n\n#==== PYENV' > ~/.zshrc
#echo 'export PATH="/home/evan/.pyenv/bin:$PATH"' > ~/.zshrc
#echo 'eval "$(pyenv init -)"' > ~/.zshrc
#echo 'eval "$(pyenv virtualenv-init -)"' > ~/.zshrc
#source ~/.zshrc

# Install python versions
pyenv update
pyenv install 3.6.6
#pyenv install 3.7.0
pyenv install miniconda-latest

# Configure local virtualenv
# NOT YET CONFIRMED WHETHER YOU CAN SET LOCAL THROUGH THIS SCRIPT
pyenv virtualenv 3.6.6 ^
pyenv local ^
pip install -U pip setuptools wheel

# Install pip packages
#pip install numpy scipy sklearn matplotlib ipython jupyterlab jupyterthemes
pip install numpy
pip install scipy
pip install sklearn
pip install matplotlib
pip install ipython
pip install jupyter
pip install jupyterthemes
pip install chainer
#pip install cupy # only for desktop
#pip install tangent # installs tf-nightly, which disrupts normal TF package

# EXTENDED PACKAGES:
apt-select # !!!!!!!!!!
atari-py
attrs
bs4
bibtexparser
chainer
chainerrl
cookiecutter # !!!!!!!!!!!!!
gym
h5py
hickle
html5lib
neupy
nose
pandas
pandocfilters
Pillow
pygame
PySC2
pyqt5
rebound-cli # !!!!!!
s2clientprotocol
sc2
scbw
thefuck # !!!!!!!!!!
pptree
pipdeptree
pprintpp
pip-chill
afdko # adobe font development kit, ligatures
pip-check # check package versions and list outdated
starred # !!!! : generates starred
termdown # terminal countdown timer/stopwatch
cairosvg # converts svg to pdf or png
python-qtpip # gui manager for pip
grip # preview github markdown before uploading
gitsuggest # suggest repos based on your stars
art # ascii art tool (text -> ascii)
betterbib # !!!!!!!!!!!!!!! can fix bibtext from info retrieved
pyment # !!! format and convert python docstrings

#----------
# RST utils
#----------
docutils # rst source
rst # Module to create reStructuredText documents through code.


rstvalidator
reflowrst # Modify valid rst text to fit within given width
retext # rst editor with live preview (kind of sucks)
rstwatch # !!!!!!!!!!!!!!!!!!!! Watch directories for changes to RST files and generate HTML
rstdiary # Create static HTML diary from single RST input

# Misc

# NOPE rstdoc # support documentation in restructedText (rst)
# NOT WORKING PY3 rst2pdf
# NOT WORKING 2lazy2rest # Effortless generation of PDF, HTML & ODT documents from RST (ReStructuredT
# Eh ... htmlize # tiny utility command, generate html from any formats(e.g. .md, .rst)
# NOT WORKING: rstviewer # An in-browser RST viewer with live updating
rstvalidator
flake8-rst-docstrings # Python docstring reStructuredText (RST) validator
rst-archiver # Add files to your RST notes more easily.
# NOT WORKING: instant-rst # Preview Rst Document Instantly


# Sphinx
sphinx # EVERYTHING
sphinxcontrib-jupyter # Sphinx "Jupyter" extension: Convert your RST files into executable Jupyter notebooks.
#sphinx-api-any # extract comments from source files into rst files
#doc8 # Style checker for Sphinx (or other) RST documentation
#sphinx2rst


## Pelican
pelican # !!!!!!! sphinx for generating articles blog
pelican_publications # ????? !!!! A Pelican plugin that adds an RST directive for including a BibTeX publication list.



#------------------------------------------------------------------------------
# NPM
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Misc
#------------------------------------------------------------------------------

# Prolog
#========================
apt install -y swi-prolog
apt install -y swi-prolog-doc

# Prolog
#========================




#==============================================================================
## CUDA, cuDNN, TensorRT, MKL SETUP GUIDE ##
#==============================================================================




# Installing CUDA, cuDNN, TensorRT
Great, now that you have your python environment setup, let's setup your GPU enviroment if you have one. I'd love to include the CUDA, cuDNN, and TensorRT files to this repo as releases, but it would likely violate some legal stuff with Nvidia so you'll have to source those files yourself.

## Cuda
I am assuming a clean build here (from a fresh install). If you have a preexisting CUDA installation, or nvidia drivers, the process is somewhat more complicated and you should consult the installation guides.

Remember to use your own file names! The ones listed below were simply the current versions at the time of writing.

```bash
#==== Install CUDA deb
# Make sure you download the network package, NOT the local!
#  The local package does not always support the latest kernel!

sudo dpkg -i cuda-repo-ubuntu1604_9.2.148-1_amd64.deb
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
sudo apt update

# WARNING: if you install the normal `cuda` package instead of the
#  specific version package, the package manager will automatically
#  update your CUDA installation. Very rarely do CUDA-accelerated
#  libraries support new CUDA versions at release, so you want to lock
#  in your cuda version
sudo apt install cuda-9-2

# Now, add the following lines to your shell config (.zshrc, etc)
export PATH=/usr/local/cuda-9.2/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-9.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# Reboot machine to finish installation
reboot

# Verify successful installation
nvcc -V
# What you should see:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2018 NVIDIA Corporation
Built on Tue_Jun_12_23:07:04_CDT_2018
Cuda compilation tools, release 9.2, V9.2.148
# nvcc good!

nvidia-smi
# What you should see:
Wed Sep  5 13:29:47 2018
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 396.44                 Driver Version: 396.44                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 1070    Off  | 00000000:01:00.0  On |                  N/A |
|  0%   33C    P8     7W / 151W |    487MiB /  8116MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|    0      1066      G   /usr/lib/xorg/Xorg                           307MiB |
|    0      2250      G   ...-token=8A67B2F1EABFF160B8155A812A7C727D    49MiB |
|    0      2598      G   ...-token=407E46496140809C1A6609D27566E245    70MiB |
+-----------------------------------------------------------------------------+
```
Great! CUDA's all set!

## cuDNN
cuDNN installation always comes **after** you've installed CUDA.
cuDNN can be a bit trickier than the CUDA installation--I had trouble with this at first--but I think the trick here is to use the tar files instead of the other formats (.deb, .local, or whatever).

You also have to sign up and do a silly survey to get access to the cuDNN (and TensorRT) downloads. After you've done that, grab the cuDNN tar file supporting your CUDA version.

```bash
#==== cuDNN
# tar file method:
tar -xzvf cudnn-9.2-linux-x64-v7.2.1.38.tgz # whatever ver you got
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

# Now verify cuDNN installation was successful
#  For cuDNN 7.2, you should see CUDNN_MAJOR 7, CUDNN_MINOR 2
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2

## Should see something like:
#define CUDNN_MAJOR 7
#define CUDNN_MINOR 2
#define CUDNN_PATCHLEVEL 1
--
#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)

#include "driver_types.h"
```
cuDNN, Done!

## TensorRT
While CUDA and cuDNN are required for any GPU-accelerated ML framework, TensorRT is an optional library. But if you've come this far, why not squeeze a little more from your GPU? Plus, it's the easiest installation out of the three.
```bash
#==== TensorRT
# First install CUDA. Then get the latest TensorRT supporting your
#  CUDA version. eg, at the time of writing:
sudo dpkg -i nv-tensorrt-repo-ubuntu1604-cuda9.2-ga-trt4.0.1.6-20180612_1-1_amd64.deb
sudo apt update
sudo apt install tensorrt
sudo apt install uff-converter-tf

# verify:
dpkg -l | grep TensorRT
## Should see something like:
ii  graphsurgeon-tf                                            4.1.2-1+cuda9.2                              amd64        GraphSurgeon for TensorRT package
ii  libnvinfer-dev                                             4.1.2-1+cuda9.2                              amd64        TensorRT development libraries and headers
ii  libnvinfer-samples                                         4.1.2-1+cuda9.2                              amd64        TensorRT samples and documentation
ii  libnvinfer4                                                4.1.2-1+cuda9.2                              amd64        TensorRT runtime libraries
ii  tensorrt                                                   4.0.1.6-1+cuda9.2                            amd64        Meta package of TensorRT
ii  uff-converter-tf                                           4.1.2-1+cuda9.2                              amd64        UFF converter for TensorRT package

```
TensorRT is good!

All done with the GPU environment! :clap:

* * *

# Installing MKL
**The following MKL installation guide was copied, verbatim, from TinyMind (https://github.com/mind) at https://github.com/mind/wheels#mkl. That's where I got my wheels before I started building my own. Make sure to check them out!**

> MKL is [Intel's deep learning kernel library](https://github.com/01org/mkl-dnn), which makes training neural nets on CPU much faster. If you don't have it, install it like the following:

```sh
# If you don't have cmake
sudo apt install cmake

git clone https://github.com/01org/mkl-dnn.git
cd mkl-dnn/scripts && ./prepare_mkl.sh && cd ..
mkdir -p build && cd build && cmake .. && make
sudo make install

echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.bashrc
```

#==== CUDA
# download network deb, since local deb does not work with kernel 4.13
sudo apt remove --purge nvidia* cuda*
sudo dpkg -i cuda-repo-ubuntu1604_9.1.85-1_amd64.deb;
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
sudo apt update
## see troubleshooting first #sudo apt install cuda-9-1 # CRITICAL, DO NOT INSTALL `cuda`

#==== TROUBLESHOOTING CUDA

# simply calling `sudo apt install cuda-9-2` in 18.04 resulted in the following confirmed error:
#`trying to overwrite '/usr/lib/x86_64-linux-gnu/libGLX_indirect.so.0',
# which is also in package libglx-mesa0:amd64 18.0.5-0ubuntu0~18.04.1`
#To avoid this, do the following instead:
#sudo apt -o Dpkg::Options::="--force-overwrite" install cuda-9-2
## if that doesn't work, or it says cuda-9-2 already installed, than it is missing the drivers, so just call
#sudo apt -o Dpkg::Options::="--force-overwrite" install --fix-broken


# add the following lines to your .zshrc
#export PATH=/usr/local/cuda-9.1/bin${PATH:+:${PATH}}
#export LD_LIBRARY_PATH=/usr/local/cuda-9.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
#reboot;

#==== cuDNN
# the .deb installation never works, just do the tar file method:
tar -xzvf cudnn-9.1-linux-x64-v7.1.tgz;
sudo cp cuda/include/cudnn.h /usr/local/cuda/include;
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64;
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*;
# cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 # for confirm
# nvcc -V # for confirm

#==== TensorRT
# First install and setup CUDA, verify installation
sudo dpkg -i nv-tensorrt-repo-ubuntu1604-cuda9.2-ga-trt4.0.1.6-20180612_1-1_amd64.deb
sudo apt update
sudo apt install tensorrt
sudo apt install uff-converter-tf
# verify:
dpkg -l | grep TensorRT

#==== MKL


#==============================================================================
## TENSORFLOW SETUP GUIDE ##
#==============================================================================

#==============================================================================
# Based on machine:
# - Desktop (GTX 1070, CUDA, cuDNN, MKL, TensorRT):
#   - Install CUDA, cuDNN, MKL, TensorRT first!
#   - Get latest TF GPU wheel from https://github.com/mind/wheels
#     - pip install --no-cache-dir <*.whl link>
# - ThinkPad x201:
#   - Use TF-cpu whl you built from source from storage (SSE4.1, SSE4.2)
# - ThinkPad T430:
#   - Use TF-cpu whl you built from source from storage (AVX, SSE4.1, SSE4.2)

#==============================================================================
## HOW TO BUILD FROM SOURCE GUIDE:
# Reference:
# https://www.tensorflow.org/install/install_sources
# https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions
#
# 1 - Install bazel:
#   - https://docs.bazel.build/versions/master/install-ubuntu.html#install-on-ubuntu
#     - Note: do not configure for the $USER dir, just install for system (/bin/)
# 2 - Clone TF repo:
#     - cd ~/Soft/DevStuff/Py/
#     - git clone https://github.com/tensorflow/tensorflow && cd tensorflow
#     - git checkout branch # if you want specific release
# 3 - ./configure
#     - Default locations (just press enter)
#     - "No" for all other options ('Google Cloud', 'Hadoop', etc...)
#     - At final "Please specify optimization flags to use...":
#       - enter '-mavx -msse4.2 -msse4.1' or whatever else
# 4 - Build pip package:
#     - bazel build -c opt --copt=-mavx --copt=-msse4.2 --copt=-msse4.1 --config=mkl //tensorflow/tools/pip_package:build_pip_package
#     - bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/
# 5 - Wait on build (takes at least 15min on i7-7700)
# 6 - Install built pip wheel! (should be in ~)
#     - pip install --no-cache-dir tensorflow.*.whl




#==============================================================================
## MISC CONFIGURATION ##
#==============================================================================

#==== jupyterthemes
#jt -t onedork -fs 12 -f ubuntu -altp -tfs 11 -nfs 115 -cellw 90% -T -N

#==== Keyboard Shortcuts:
# amixer set Master 5%+ # Alt + =
# amixer set Master 5%- # Alt + -
# subl # super+E
# ghostwriter # super+G
# xfce4-screenshooter # print
# xfce4-popup-whiskermenu # super+R

#==== Window Manager Hotkeys:
# super+left super+right, tile left, right etc.
# default (must reenter same thing) move to workspace N
# alt+5 to minimize window

#==== sshfs
# How to mount a remote directory to local machine via sshfs
# sshfs name@server:/path/to/folder /path/to/mount/point


#==== Japanese IME (mozc)
# mozc
#If you have Xubuntu 16.04 installed and want to be able to type Japanese, try the following steps:
#1. Go to "Settings" and then "Language Support": click the button "install/remove languages" and choose Japanese.
#2. Change the "Keyboard input method system" (same menu) to "fcitx". "Close" window.
#3. Go to "Keyboard", choose the "Layout" tab, and "Add" Japanese. Make sure "use system default" is untoggled. "Close" window (I'm not sure this step is necessary, but I did it anyway)
#4. Go to "Settings" and then "Fcitx Configuration", under the tab "Input method" click "+". Untoggle "only show current language" and choose "Mozc Japanese" from the list. (I had to scroll throught the entire list to find this. It doesn't start with "Keyboard - " like the other options.)
#5. Go to the tab "Global config" in the same window and look which keys trigger the Japanese input method. The default on my computer is CTRL+Space. Alternatively, a keyboard icon should be visible in the panel where you can select "Input method" - "Mozc"
#I admit to restarting my computer a few times inbetween some of the steps. I'm not sure if it is necessary.
#I don't remember ever installing "Mozc" and "Fcitx", I think they came with the system/Japanese language support.

# in Language Support > regional formats > display numbers usual format for japanese
# orage clock format: %x %R
# https://www.linuxquestions.org/questions/slackware-14/xfce-clock-custom-formatting-codes-753433/
# previous: %d %b, %H:%M



#sudo add-apt-repository ppa:xubuntu-dev/extras; # kind of clunky
#sudo apt update;
#sudo apt install -y xfdashboard;


# FINISHING
apt update
apt upgrade -y
update-ca-certificates -f
apt autoremove -y
echo "FINISHED"
